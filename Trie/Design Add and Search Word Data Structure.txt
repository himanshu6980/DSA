class WordDictionary {
    
    private TrieNode root;

    public WordDictionary() {
        root = new TrieNode();
    }
    
    public void addWord(String word) {
        TrieNode crawler = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (crawler.children[index] == null) {
                crawler.children[index] = new TrieNode();
            }
            crawler = crawler.children[index];
        }
        crawler.isEndOfWord = true;
    }
    
    public boolean search(String word) {
        return searchUtil(root, word);
    }
    
  private boolean searchUtil(TrieNode node, String word) {
        TrieNode crawler = node;
        
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            int index = ch - 'a';
            
            if (ch == '.') {
                for (int j = 0; j < 26; j++) {
                    if (crawler.children[j] != null) {
                        // if (b.ts)--> then after . found, take all b children and search for "ts"
                        if (searchUtil(crawler.children[j], word.substring(i + 1))) {  // tc : 26 ^ N
                            return true;
                        }
                    }
                }
                return false;
            } 
            else if (crawler.children[index] == null) {
                return false;
            }
            
            crawler = crawler.children[index];
        }
        return crawler != null && crawler.isEndOfWord;
    }

    
}

class TrieNode {
    TrieNode[] children;
    boolean isEndOfWord;

    public TrieNode() {
        this.children = new TrieNode[26];
        this.isEndOfWord = false;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */