class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        
        List<List<Integer>> res=new ArrayList<>();

        int row=matrix.length;
        int col=matrix[0].length;

        if(row==0 || col==0){
            return res;
        }

        boolean [][] pacific=new boolean[row][col];
        boolean [][] atlantic=new boolean[row][col];


        for(int i=0;i<col;i++){
            dfs(0,i,pacific,matrix,Integer.MIN_VALUE);
            dfs(row-1,i,atlantic,matrix,Integer.MIN_VALUE);
        }

          for(int i=0;i<row;i++){
            dfs(i,0,pacific,matrix,Integer.MIN_VALUE);
            dfs(i,col-1,atlantic,matrix,Integer.MIN_VALUE);
        }

        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(pacific[i][j]==true && atlantic[i][j]==true){
                    res.add(Arrays.asList(i,j));
                }
            }
        }

        return res;
    }


    public void dfs(int i,int j , boolean[][] ocean , int[][]matrix, int prev){

        if(i<0 || i>=ocean.length || j<0 || j>=ocean[0].length){
            return ;
        }

        if(ocean[i][j]==true || matrix[i][j]<prev){
            return;
        }

        ocean[i][j]=true;
        dfs(i,j-1,ocean,matrix,matrix[i][j]);
        dfs(i,j+1,ocean,matrix,matrix[i][j]);
        dfs(i-1,j,ocean,matrix,matrix[i][j]);
        dfs(i+1,j,ocean,matrix,matrix[i][j]);

    }
}