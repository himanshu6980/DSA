Time Complexity: O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. In the case of connected components of a graph, it will take another O(N) time.

Space Complexity: O(N) + O(N) ~ O(N), Space for queue data structure and visited array.

class Pair{
    int node;
    int parent;
    
    Pair(int node,int parent){
        this.node=node;
        this.parent=parent;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
     boolean[] vis = new boolean[V];
        
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (checkCycle(adj, i, vis)) {
                    return true;
                }
            }
        }
        
        return false;
        
        
    }
    
  public boolean checkCycle(ArrayList<ArrayList<Integer>> adj, int s, boolean[] vis) {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(s, -1));
        vis[s] = true;
        
        while (!q.isEmpty()) {
            Pair p = q.poll();
            int node = p.node;
            int parent = p.parent;
            
            for (Integer neighbourNode : adj.get(node)) {
                if (!vis[neighbourNode]) {
                    vis[neighbourNode] = true;
                    q.add(new Pair(neighbourNode, node));
                } else if (neighbourNode != parent) {
                    return true;
                }
            }
        }
        
        return false;
    }
}