sc: o(n*m)
tc: o(n*m)



 public int orangesRotting(int[][] grid)
    {
        // Code here
        
        int row=grid.length;
        int col=grid[0].length;
        
        Queue<Pair> q=new LinkedList<>();
        
        int[][] vis=new int[row][col];
        
 
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j,0));
                    vis[i][j]=2;
                }
            }
        }
        
        int tm=0;
        
        int[] drow={-1,0,+1,0};
        int [] dcol={0,+1,0,-1};
        
        while(!q.isEmpty()){
            
            int r=q.peek().row;
            int c=q.peek().col;
            int t=q.peek().time;
            tm=Math.max(tm,t);
            q.remove();
            
            for(int i=0;i<4;i++){
                
                int nrow=r+drow[i];
                int ncol=c+dcol[i];
                
                if(nrow>=0 && nrow< row && ncol>=0 && ncol<col && 
                vis[nrow][ncol] !=2 && grid[nrow][ncol]==1){
                    q.add(new Pair(nrow,ncol,t+1));
                    vis[nrow][ncol]=2;
                }
            }
            
        }
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(vis[i][j] !=2 && grid[i][j]==1){
                    return -1;
                }
            }
        }
        
        
        return tm;
    }
	
	
	
class Pair{
    
    int row;
    int col;
    int time;
    
    Pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}