Time Complexity: O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. In the case of connected components of a graph, it will take another O(N) time.

Space Complexity: O(N) + O(N) ~ O(N), Space for recursive stack space and visited array.

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        
        boolean[] vis=new boolean[V];
        
        for(int i=0;i<V;i++){
            if(vis[i]==false){
            if(checkCycle(i,-1,adj,vis)==true){
                return true;
            }
            }
        }
        
        
    return false;
        
        
    }
    
    public boolean checkCycle(int node,int parent,ArrayList<ArrayList<Integer>> adj,boolean[] vis){
        
        vis[node]=true;
        
        for(int nnodes: adj.get(node)){
            
            if(vis[nnodes]==false){
                if(checkCycle(nnodes,node,adj,vis)==true){
           
                    return true;
                }
            }
            else if(nnodes !=parent){
                return true;
            }
        }
        
        return false;
    }
    
  
}