
Time Complexity: O(N * M * 26)

Where N = size of wordList Array and M = word length of words present in the wordList..

Note that, hashing operations in an unordered set takes O(1) time, but if you want to use set here, then the time complexity would increase by a factor of log(N) as hashing operations in a set take O(log(N)) time.

Space Complexity:  O( N ) { for creating an unordered set and copying all values from wordList into it }

class Pair {
    String word;
    int len; //output
    Pair(String _first, int _second) {
        this.word = _first;
        this.len = _second;
    }
}
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        //bfs

        Queue<Pair> q=new LinkedList<>();

        q.add(new Pair(beginWord, 1));

        Set<String> st=new HashSet<>();

        for(int i=0;i<wordList.size();i++){
            st.add(wordList.get(i));
        }

        st.remove(beginWord);

        while(!q.isEmpty()){

            String word=q.peek().word;
            int len=q.peek().len;

            q.remove();

            if(word.equals(endWord)){
                return len;
            }

            //// Now, replace each character of ‘word’ with char
            // from a-z then check if ‘word’ exists in wordList.

            for(int i=0;i<word.length();i++){

                for(char ch='a'; ch<='z';ch++){

                    char [] charArray=word.toCharArray();

                    charArray[i]=ch;

                    String newWordafterReplace=new String(charArray);

                    if(st.contains(newWordafterReplace)){
                        st.remove(newWordafterReplace);
                        q.add(new Pair(newWordafterReplace,len+1));
                    }
                 }
            }
        }


        return 0;
    }
}