class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        int V=numCourses;

        List<List<Integer>> adj=new ArrayList<>();

        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<prerequisites.length;i++){
            int course=prerequisites[i][0];
            int pre=prerequisites[i][1];

            adj.get(course).add(pre);
        }

        int[] indegree=new int[V];
        
        for(int i=0;i<V;i++){
            for(int n: adj.get(i)){
                indegree[n]++;
            }
        }
        
        Queue<Integer> q=new LinkedList<>();
        
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
       List<Integer>topo = new ArrayList<>();
        while(!q.isEmpty()){
            int node=q.remove();
            
           topo.add(node);
            
            for(int an: adj.get(node)){
                indegree[an]--;
                
                if(indegree[an]==0){
                    q.add(an);
                }
            }
        }

        if(topo.size()==V){
            return true;
        }
        
        return false;


    }
}

// II

class Solution {
    public int[] findOrder(int V, int[][] prerequisites) {
   

        List<List<Integer>> adj=new ArrayList<>();

        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<prerequisites.length;i++){
            int course=prerequisites[i][0];
            int pre=prerequisites[i][1];

            adj.get(pre).add(course);
        }

 

        int[] indegree = new int[V];

 
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }

        // Checking the vertices with 0 indegree
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        // BFS
        List<Integer> topo = new ArrayList<>();
        while (!q.isEmpty()) {
            int par = q.poll();
            topo.add(par);
            for (int child : adj.get(par)) {
                indegree[child]--;
            
                if (indegree[child] == 0) {
                    q.add(child);
                }
            }
        }

        if (topo.size() == V) {
 
            int[] result = new int[V];
            for (int i = 0; i < V; i++) {
                result[i] = topo.get(i);
            }
            return result;
        }

        return new int[0];
    }
}