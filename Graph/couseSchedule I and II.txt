O(V + E) time and O(V + E) space
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //if no cycle can finish (get topological sort on dag)
        //if cycle not possible cant finish

        int V=numCourses;

        //create graph

        List<List<Integer>> adjlist=new ArrayList<>();

        for(int i=0;i<V;i++){
            adjlist.add(new ArrayList<>());  // equal no of adj list for v vertice
        }

        for(int i=0;i<prerequisites.length;i++){
         int firstcourse = prerequisites[i][0];  // Course that depends on prerequisite
        int secondcourse = prerequisites[i][1]; // Prerequisite course

        adjlist.get(secondcourse).add(firstcourse); // Edge from prerequisite to dependent course

        //adjlist.get(secondcourse) retrieves the list of courses that are dependent on secondcourse, 
        //and .add(firstcourse) adds firstcourse to that list.
        }

        int [] indegree=new int[V];

        for(int i=0;i<V;i++){

            for(int dependent: adjlist.get(i)){
                indegree[dependent]++;
            }
        }

        Queue<Integer> q =new LinkedList<>();

        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }

        List<Integer>topo = new ArrayList<>();


        while(!q.isEmpty()){
            int node=q.remove();
            topo.add(node);
            for(int dependent: adjlist.get(node)){
                indegree[dependent]--;

                if(indegree[dependent]==0){
                    q.add(dependent);
                }
            }
        }

        return topo.size()==V; //check cycle or not




    }
}

// II

class Solution {
    public int[] findOrder(int V, int[][] prerequisites) {
   

        List<List<Integer>> adj=new ArrayList<>();

        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<prerequisites.length;i++){
            int course=prerequisites[i][0];
            int pre=prerequisites[i][1];

            adj.get(pre).add(course);
        }

 

        int[] indegree = new int[V];

 
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }

        // Checking the vertices with 0 indegree
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        // BFS
        List<Integer> topo = new ArrayList<>();
        while (!q.isEmpty()) {
            int par = q.poll();
            topo.add(par);
            for (int child : adj.get(par)) {
                indegree[child]--;
            
                if (indegree[child] == 0) {
                    q.add(child);
                }
            }
        }

        if (topo.size() == V) {
 
            int[] result = new int[V];
            for (int i = 0; i < V; i++) {
                result[i] = topo.get(i);
            }
            return result;
        }

        return new int[0];
    }
}