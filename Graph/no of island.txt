class Pair {
    int first;
    int second;

    public Pair(int f, int s) {
        this.first = f;
        this.second = s;
    }
}

class Solution {
    public int numIslands(char[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        int cnt = 0;

        int[][] visited = new int[row][col];

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (visited[i][j] == 0 && grid[i][j] == '1') {
                    cnt+=1;
                    bfs(i, j, grid, visited);
                }
            }
        }

        return cnt;
    }

  public void bfs(int row, int col, char[][] grid, int[][] visited) {
    visited[row][col] = 1;
    Queue<Pair> q = new LinkedList<>();

    q.add(new Pair(row, col));

    int n = grid.length;
    int m = grid[0].length;

    while (!q.isEmpty()) {
        int first = q.peek().first;
        int second = q.peek().second;
        q.remove();

        // 4 possibilities: up, down, left, right
        int[] dr = {-1, 1, 0, 0};
        int[] dc = {0, 0, -1, 1};

        for (int i = 0; i < 4; i++) {
            int nrow = first + dr[i];
            int ncol = second + dc[i];

            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m
                    && grid[nrow][ncol] == '1' && visited[nrow][ncol] == 0) {
                visited[nrow][ncol] = 1;
                q.add(new Pair(nrow, ncol));
            }
        }
    }
}
}