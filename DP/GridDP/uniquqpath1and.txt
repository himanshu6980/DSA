Time Complexity: O(M*N)

Reason: At max, there will be M*N calls of recursion.

Space Complexity: O((N-1)+(M-1)) + O(M*N)

Reason: We are using a recursion stack space:O((N-1)+(M-1)), 
here (N-1)+(M-1) is the path length and an external DP Array of size ‘M*N’.

class Solution {
    public int uniquePaths(int m, int n) {
      int dp[][]=new int[m][n];
    for (int[] row : dp)
        Arrays.fill(row, -1);
    return f(m-1,n-1,dp);
    }

    public int f(int i,int j,int[][] t){

        if(i==0 && j==0){
            return 1;
        }

        if(i<0 || j<0){
            return 0;
        }

        if(t[i][j]!=-1){
            return t[i][j];
        }

        int up = f(i-1,j,t);
        int left = f(i,j-1,t);
        return t[i][j] = up+left;
    }
}


//unique path || obstacle


     public int f(int i,int j,int[][] obs , int[][] t){

         if(i>=0 && j>=0 && obs[i][j]==1){
             return 0;
         }

        if(i==0 && j==0){
            return 1;
        }

        if(i<0 || j<0){
            return 0;
        }

        if(t[i][j]!=-1){
            return t[i][j];
        }
         int up = f(i-1,j,obs,t);
         int left = f(i,j-1,obs,t);
        return t[i][j] = up+left;
    }