min path sum  :fron any cell 1st row --> last row any cell

//bottom to top
tc: o(n*n) sc: o(n*n)+o(n)

    public int minFallingPathSum(int[][] a) {
     int min = Integer.MAX_VALUE;
        int m = a.length;
        int n = a[0].length;
        int[][] dp=new int[m][n];
        for(int[] row: dp) Arrays.fill(row,-1);
        for(int j = 0; j<n; j++){
            int temp = getMaxUtil(m-1,j,a,dp);
            min = Math.min(min,temp);
        }
        return min;

    }

    static int getMaxUtil(int i, int j, int[][] matrix,int[][] dp){
    
    // Base Conditions
    if(j<0 || j>matrix[0].length-1)
       { return (int)Math.pow(10,9);
       }
    if(i==0){
        return matrix[i][j];
    }
    if(dp[i][j]!=-1) return dp[i][j];
    
    int up = matrix[i][j] + getMaxUtil(i-1,j,matrix,dp);
    int leftDiagonal = matrix[i][j] + getMaxUtil(i-1,j-1,matrix,dp);
    int rightDiagonal = matrix[i][j] + getMaxUtil(i-1,j+1,matrix,dp);
    
    return dp[i][j]= Math.min(up,Math.min(leftDiagonal,rightDiagonal));
    
}