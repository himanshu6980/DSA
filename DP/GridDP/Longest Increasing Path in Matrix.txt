tc: o(m*n)
sc: (m*n)

class Solution {
    public int longestIncreasingPath(int[][] matrix) {

        int maxLength = 0;

        int [][] t = new int[matrix.length+1][matrix[0].length+1];

        for(int i=0;i<t.length;i++){
            Arrays.fill(t[i],-1);
        }
        //we dont need path from 0,0 thats why traverse every i,j to fetch maxlength
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                maxLength = Math.max(maxLength,  solve(i,j,-1,matrix,t));
            }
        }

        return maxLength;
    }
    //calculates the longest increasing path starting from (row, col) in the matrix.
    public int solve(int row,int col, int prev, int [][] matrix, int [][] t){

        if(row< 0 || col < 0 || row >=matrix.length || col >=matrix[0].length){
            return 0;
        }

        //strictly increasing

        if(prev>=matrix[row][col]){
            return 0;
        }

        if(t[row][col] != -1){
            return t[row][col];
        }

        int left=1+solve(row, col-1, matrix[row][col], matrix,t);
        int right=1+solve(row, col+1, matrix[row][col], matrix,t);

        int up=1+solve(row-1, col, matrix[row][col], matrix,t);

        int down=1+solve(row+1, col, matrix[row][col], matrix,t);

        return t[row][col]=Math.max(left,Math.max(right, Math.max(up,down)));

    }
}