Time Complexity: O(M*N)

Reason: At max, there will be M*N calls of recursion.

Space Complexity: O((N-1)+(M-1)) + O(M*N)

Reason: We are using a recursion stack space:O((N-1)+(M-1)), 
here (N-1)+(M-1) is the path length and an external DP Array of size ‘M*N’.

class Solution {
    public int uniquePaths(int m, int n) {

        int [][] t= new int[m+1][n+1];

        for(int i=0;i<t.length;i++){
            Arrays.fill(t[i],-1);
        }
        
        return solve(0,0,m,n,t);
    }

    public int solve(int i, int j, int m, int n,int [][] t){

        if(i>=m || j>=n){
            return 0;
        }

        if(i==m-1 && j==n-1){
            return 1;
        }

        if(t[i][j] !=-1){
            return t[i][j];
        }

        int right= solve(i,j+1,m,n,t);
        int down=solve(i+1,j,m,n,t);

        return t[i][j]= right+down;


    }
}


//bottom up 


class Solution {
    public int uniquePaths(int m, int n) {
     int [][] t= new int[m][n];


     //base cases

       //t[i][j] ===reach i,j from 0,0

         t[0][0] = 1; //total ways to reach 0,0 from 0,0


       // Initialize the first row
        for (int col = 0; col < n; col++) {
            t[0][col] = 1; // Only one way to reach any cell in the first row
        }

        // Initialize the first column
        for (int row = 0; row < m; row++) {
            t[row][0] = 1; // Only one way to reach any cell in the first column
        }

         for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                // up se aana and right se aana
                t[i][j] = t[i - 1][j] + t[i][j - 1];
            }
        }

        return t[m-1][n-1];

    }
}



//unique path || obstacle


     public int f(int i,int j,int[][] obs , int[][] t){

         if(i>=0 && j>=0 && obs[i][j]==1){
             return 0;
         }

        if(i==0 && j==0){
            return 1;
        }

        if(i<0 || j<0){
            return 0;
        }

        if(t[i][j]!=-1){
            return t[i][j];
        }
         int up = f(i-1,j,obs,t);
         int left = f(i,j-1,obs,t);
        return t[i][j] = up+left;
    }