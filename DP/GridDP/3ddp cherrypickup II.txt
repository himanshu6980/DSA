(i,j1) (i,j2)

tc: O(N*M*M) * 9
sc: O(N) + O(N*M*M)


    public int cherryPickup(int[][] grid) {
    int dp[][][] = new int[grid.length][grid[0].length][grid[0].length];

    for (int row1[][]: dp) {
      for (int row2[]: row1) {
        Arrays.fill(row2, -1);
      }
    }
        return f(0,0,grid[0].length-1,grid,dp);
    }

    public int f(int i , int j1, int j2 , int[][] grid, int[][][] t){
        if(j1<0 || j2<0 || j1>=grid[0].length || j2>=grid[0].length){
            return (int)Math.pow(-10,9);
        } 

        if(i==grid.length-1){

            if(j1==j2){
                return grid[i][j1];
            }
            else{
               return grid[i][j1] + grid[i][j2]; 
            }
        }

        if(t[i][j1][j2]!=-1){
            return t[i][j1][j2];
        }
        int maxi = Integer.MIN_VALUE;
		
		//loop becaue for 1 step of alice 3 step bob can take so 9 combinaion of (i,j) will be there
        for(int dj1=-1;dj1<=1;dj1++){
            for(int dj2=-1;dj2<=1;dj2++){
                if(j1==j2){
                    maxi = Math.max(maxi , grid[i][j1] + f(i+1,j1+dj1,j2+dj2 , grid,t));
                }
                else{
                    maxi = Math.max(maxi , grid[i][j1] + grid[i][j2] + f(i+1,j1+dj1,j2+dj2 , grid,t)); 
                }

            }
        }

return t[i][j1][j2] = maxi;


    }