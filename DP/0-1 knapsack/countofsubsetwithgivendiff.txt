	Input: N = 4, arr[] = [5, 2, 6, 4], diff = 3
Output: 1
Explanation: We can only have a single partition which is shown below:
{5, 2} and {6, 4} such that S1 = 7 and S2 = 10 and thus the difference is 3

Input: N = 5, arr[] = [1, 2, 3, 1, 2], diff = 1
Output: 5
Explanation: We can have five partitions which is shown below
{1, 3, 1} and {2, 2} – S1 = 5, S2 = 4
{1, 2, 2} and {1, 3} – S1 = 5, S2 = 4
{3, 2} and {1, 1, 2} – S1 = 5, S2 = 4
{1, 2, 2} and {1, 3} – S1 = 5, S2 = 4
{3, 2} and {1, 1, 2} – S1 = 5, S2 = 4


	
	public static int countPartitions(int n, int d, int[] arr) {
     int sum=0;
        for(int i=0;i<n;i++){
         sum=sum+arr[i] ;
        }
        if((d+sum)%2!=0||sum<d||n==1){
            return 0;
        }
        int range=(sum+d)/2;
        return nosubset(arr,n,range);
	}
	public static int nosubset(int arr[],int n,int sum){
         int [][]dp=new int[n+1][sum+1];
         for(int i=0;i<=n;i++){
             for(int j=0;j<=sum;j++){
                 if(i==0){
                     dp[i][j]=0;
                     
                 }
                 if(j==0){
                     dp[i][j]=1;
                 }
             }
         }
         for(int i=1;i<=n;i++){
             for(int j=0;j<=sum;j++){
                 if(arr[i-1]<=j){
                     dp[i][j]=(dp[i-1][j-arr[i-1]]+dp[i-1][j])%1000000007;
                     
                 }
                 else{
                     dp[i][j]=dp[i-1][j];
                 }
             }
         }
             return dp[n][sum];
     }