Input: arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

Input: arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets.

apply knapsack for sum /2 

memoization

class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        int n = nums.length;

        for(int i: nums){
            sum+=i;
        }

        if(sum %2 !=0){
            return false;
        }

        sum=sum/2;

        Boolean [][] t= new Boolean[n+1][sum+1];

        return solve(0,sum,nums,t);
    }

    public boolean solve(int idx, int sum, int [] nums, Boolean [][] t){

        if(idx>=nums.length || sum < 0){
            return false;
        }

        if(sum==0){
            return true;
        }

        if(t[idx][sum]!=null){
            return t[idx][sum];
        }

        boolean take=false;

        if(nums[idx]<=sum){
         take=solve(idx+1,sum-nums[idx], nums,t);
        }

        boolean skip=solve(idx+1,sum,nums,t);

        return t[idx][sum]=take || skip;

    }
}


Time Complexity: O(sum * N) 
Auxiliary Space: O(sum * N) 
    public boolean canPartition(int[] arr) {

        int sum=0;
        int n = arr.length;
        for(int i=0;i<n;i++){
            sum+=arr[i];
        }

        if(sum%2 !=0){
            return false;
        }

        return subsetsum(arr,  sum/2 , n);
        
    }

    public boolean subsetsum(int arr[], int sum , int n){
     
    boolean [][] t = new boolean [n+1][sum+1];

    for(int i=0;i<n+1;i++){
        for(int j=0;j<sum+1;j++){


            if(i==0){
                t[i][j] = false;
            }

            if(j==0){
                t[i][j] = true;
            }
        }
    }

    for(int i=1;i<n+1;i++){

        for(int j=1;j<sum+1;j++){
            if(arr[i-1]<=j){

                t[i][j] = (t[i-1][j-arr[i-1]] || t[i-1][j]);
            }

            else{
                t[i][j] = t[i-1][j];
            }
        }
    }
  return t[n][sum];
    }