Input:  arr[] = {1, 6, 11, 5} 
Output: 1
Explanation:
Subset1 = {1, 5, 6}, sum of Subset1 = 12 
Subset2 = {11}, sum of Subset2 = 11  

Time Complexity = O(n*sum) where n is the number of elements and sum is the sum of all elements.
Auxiliary Space: O(n*sum)

public int minDifference(int arr[], int n) 
	{ 
	    
	    int sum =0;
	    for(int i=0;i<n;i++){
	        sum+=arr[i];
	    }
	    
	    boolean [][] t =new boolean[n+1][sum+1];
	    
	    //initilize
	    
	    for(int i=0;i<n+1;i++){
	        
	        for(int j=0;j<sum+1;j++){
	            
	            if(i==0){
	                t[i][j] = false;
	            }
	            
	            if(j==0){
	                t[i][j] = true;
	            }
	        }
	    }
	    
	    //fill matrix
	    
	    for(int i=1;i<n+1;i++){
	        
	        for(int j=1;j<sum+1;j++){
	            
	            if(arr[i-1]<=j){
	                t[i][j] = (t[i-1][j-arr[i-1]] || t[i-1][j]);
	            }
	            else{
	                t[i][j] = t[i-1][j];
	            }
	        }
	    }
	    
	    int minSubsetSUm = 0;
	    
	    for(int j=sum/2;j>=0;j--){
	        if(t[n][j]==true){
	            minSubsetSUm = sum - 2*j;
	            break;
	        }
	    }
	    
	    return minSubsetSUm;
	}