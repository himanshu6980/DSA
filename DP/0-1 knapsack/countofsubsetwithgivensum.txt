Input: arr[] = {1, 2, 3, 3}, X = 6 
Output: 3 
All the possible subsets are {1, 2, 3}, 
{1, 2, 3} and {3, 3}

Input: arr[] = {1, 1, 1, 1}, X = 1 
Output: 4 


Time Complexity: O(sum*n), where the sum is the ‘target sum’ and ‘n’ is the size of the array.
Auxiliary Space: O(sum*n), as the size of the 2-D array, is sum*n. 

public int perfectSum(int arr[],int n, int sum) 
	{ 
	    int [][] t = new int [n+1][sum+1];
		
		//t[i][j] represents the number of subsets of the first i elements that sum to j
	     int mod = (int)Math.pow(10,9) + 7;
	    
	    //intialize ele picked row  with ele_count =0 --> noofsubset=0
	    
	    for(int j=0;j<sum+1;j++){
	        t[0][j]=0;
	    }
	    
	   // intialize noofsubset with ele including 0 too
	    
	    for(int i=0;i<n+1;++i){
	        
	        int k = countnoofzerosinarraytillindex(arr , i);
	        
	        t[i][0] = (int)Math.round(Math.pow(2 , k));
			
			this above part why 
			
			/*arr = {0, 0, 3, 5}
			Up to i = 2 ([0, 0]), there are 2 zeros.

			The number of ways to form a subset with sum 0 = 2^2=4

			Exclude both zeroes → {}

			Include first zero only → {0}

			Include second zero only → {0}

			Include both zeroes → {0, 0}*/
	        
	    }
	   
	   //t[0][0]=1;
	    
	    //dp logic
	    
	    for(int i=1;i<n+1;i++){
	        for(int j=0;j<sum+1;j++){
	            
	            if(arr[i-1]<=j){
	                
	                t[i][j] = t[i-1][j-arr[i-1]] + t[i-1][j];
	            }
	            else{
	                t[i][j] = t[i-1][j];
	            }
	            
	             t[i][j] %= mod;
	        }
	    }
	    
	    return t[n][sum]%mod;
	}
	
	 public int countnoofzerosinarraytillindex(int[] arr , int i){
	    
	    int count=0;
	    
	    for(int j=0;j<i;j++){
	        if(arr[j]==0){
	            count+=1;
	        }
	    }
	    
	    return count;
	}