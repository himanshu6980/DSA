  
  bitonic : A subsequence of array is called Bitonic 
  if it is first strictly increasing, then strictly decreasing.

[1, 11, 2, 10, 4, 5, 2, 1]   output ==> 6 [1, 2, 10, 4, 2, 1]
  
  tc: o(n^2)
  
  public int LongestBitonicSequence(int[] arr)
    {   int n = arr.length;
         int[] lis = new int[n]; //longest increasing
        Arrays.fill(lis, 1);
        int maxLength = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if ( arr[j] < arr[i] &&  lis[j] + 1 > lis[i]) {
                    lis[i] = lis[j] + 1;
                }
            }
        }
		
		//lis = [1, 2, 2, 3, 3, 4, 2, 1]

        int[] lds = new int[n];  //longest decreasing 
        Arrays.fill(lds, 1);
        for (int i = n-1; i >= 0; i--) {
            for (int j = n-1; j > i; j--) {
                if ( arr[j] < arr[i] &&  lds[j] + 1 > lds[i]) {
                    lds[i] = lds[j] + 1;
                }
            }
        }
		
		
		//lds = [6, 1, 5, 2, 3, 3, 2, 1]


        for(int i=0;i<n;i++){
		//[1+6-1=6, 2+1-1=2, 2+5-1=6, 3+2-1=4, 3+3-1=5, 4+3-1=6, 2+2-1=3, 1+1-1=1]
             maxLength = Math.max(maxLength , lis[i]+lds[i]-1);
        }


        return maxLength;
    }