   tc: O(N*N) 
   sc : O(N*N) + O(N)
   
  class Solution {
    public int lengthOfLIS(int[] nums) {
        int[][] t= new int[nums.length+1][nums.length+1];

        for(int i=0;i<t.length;i++){
            Arrays.fill(t[i],-1);
        }
        return solve(-1, 0, nums,t);
    }

    public int solve(int prev, int idx, int[] nums,int [][] t) {
        if (idx >= nums.length) {
            return 0;
        }

        if(prev !=-1 && t[prev][idx]!=-1){
            return t[prev][idx];
        }
		
		// Option 1: Take the current element if it is greater than the previous one


        int take = 0;
        if (prev == -1 || nums[idx] > nums[prev]) {
            take = 1 + solve(idx, idx + 1, nums,t);
        }
		
		 // Option 2: Skip the current element


        int skip = solve(prev, idx + 1, nums,t);
		
		// Store the result in the memoization table if prev is valid


        if(prev !=-1){
            t[prev][idx]=Math.max(skip, take);
        }

        return Math.max(skip, take);
    }
}



bottom up

class Solution {
    public int lengthOfLIS(int[] nums) {
       int n = nums.length;

       //t[i] lis ending at index i

       int [] t = new int[n];

       Arrays.fill(t,1);  //single number is a self subsequence

        int maxLIS = 1;


       for(int i=0;i<n;i++){

        for(int j=0;j<i;j++){

            if(nums[i]> nums[j]){
                //nottake, take
                t[i] = Math.max(t[i], t[j] + 1);

                 maxLIS = Math.max(maxLIS, t[i]);

            }
         }
       }

       return maxLIS;


    }
}