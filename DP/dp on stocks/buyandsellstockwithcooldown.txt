cooldown 1 days
in sell ind==> ind+2

tc: O(N*2)  sc: O(N*2) + O(N)

  public int maxProfit(int[] prices) {
        
        int[][] t = new int[prices.length][2];
        for(int i=0;i<t.length;i++){
            Arrays.fill(t[i],-1);
        }
        return f(0,1,prices,t);
    }

    int f(int index , int buy, int[] prices , int[][] t){

            if(index>=prices.length){
                return 0;
            }

            if(t[index][buy] != -1){
                return t[index][buy];
            }

        if(buy==1){
            return t[index][buy] = Math.max(-prices[index]+ f(index+1,0,prices,t) , 0+ f(index+1,1,prices,t) ); 
        }
        else{
             return t[index][buy] = Math.max(f(index+2,1,prices,t) + prices[index] , 0+ f(index+1,0,prices,t));
        }
    }
	
	
bottom up 

class Solution {
    public int maxProfit(int[] prices) {

        int n = prices.length;

        if(n==1){
            return 0;
        }
        
        int [] t= new int[n];

        //t[i] - max profil until day i

        t[0] = 0; //no profit on 0th day

        // max profit on 1 st day  (sell -buy)

        t[1]= Math.max(prices[1]- prices[0], 0);

        for(int i=2;i<n;i++){  // days
                t[i] = t[i-1]; //cool down
            for(int j=0;j<=i-1;j++){

                int today_profit_if_sell=prices[i]-prices[j];

                int prev_profit= j-2 >= 0? t[j-2]: 0;  

                //j-2 because on j buy sell at i , one day cooldown 

                t[i]= Math.max(t[i], today_profit_if_sell + prev_profit);
            }

        }

        return t[n-1];


    }
}