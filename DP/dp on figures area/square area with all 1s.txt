//using histogram area function for matrix every row


There are n rows , m column.

Each row updates the height[] array in O(m).

Calls largestRectangleArea(height), which runs in O(m).

Total complexity: o(n*m)
   public int maximalSquare(char[][] matrix) {
      int n = matrix.length;
        int m = matrix[0].length;
        int [] height=new int[m];
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){

                if(matrix[i][j]=='1'){
                    height[j] ++;
                }
                else{
                    height[j] =0;
                }
            }

           int area= largestRectangleArea(height);
           ans=Math.max(area,ans);
        }
        return ans; 
    }

     public int largestRectangleArea(int[] arr) {

        int n = arr.length;

        int [] rb = new int[n];

        Stack<Integer> st= new Stack<>();
                rb[n-1] = n;
                st.push(n-1);

        for(int i=n-2;i>=0;i--){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){
                st.pop();
            }

            if(st.size()==0){
                rb[i]=n;
            }
            else{
                rb[i]=st.peek();
            }

            st.push(i);
        }

        int[] lb = new int[n];

            st= new Stack<>();
                lb[0] = -1;
                st.push(0);

        for(int i=1;i<n;i++){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){
                st.pop();
            }

            if(st.size()==0){
                lb[i]=-1;
            }
            else{
                lb[i]=st.peek();
            }

            st.push(i);
        }

        int maxArea=Integer.MIN_VALUE;

        for(int i=0;i<n;i++){
            int width = rb[i]-lb[i]-1;
            int side = Math.min(width , arr[i]);  
			//min becaue sqaure side will depends on min value of anyone . only min side will make square
            int area = side*side;

            maxArea=Math.max(maxArea,area);
        }
        return maxArea;
    }