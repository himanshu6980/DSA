tc: o(n^2) sc: o(1)

static int largestarea(int arr[], int n) {
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int minHeight = Integer.MAX_VALUE;
            for (int j = i; j < n; j++) {
                minHeight = Math.min(minHeight, arr[j]);
                maxArea = Math.max(maxArea, minHeight * (j - i + 1));
            }
        }
        return maxArea;
    }
	
	
tc: O( N ) sc: o(3N)

use leftsmall and right small concept

[2, 1,5,6,2,3]   ans = 10

right bounadry
 1  6 4 4 6 6 
left bounadry
-1 -1 1 2 1 4

Bar 0 (height 2): width = 1 - (-1) - 1 = 1 → area = 2×1 = 2

Bar 1 (height 1): width = 6 - (-1) - 1 = 6 → area = 1×6 = 6

Bar 2 (height 5): width = 4 - 1 - 1 = 2 → area = 5×2 = 10

Bar 3 (height 6): width = 4 - 2 - 1 = 1 → area = 6×1 = 6

Bar 4 (height 2): width = 6 - 1 - 1 = 4 → area = 2×4 = 8

Bar 5 (height 3): width = 6 - 4 - 1 = 1 → area = 3×1 = 3

  public int largestRectangleArea(int[] arr) {

        int n = arr.length;

        int [] rightsmaller = new int[n];

        Stack<Integer> st= new Stack<>();
                rightsmaller[n-1] = n;
                st.push(n-1);

        for(int i=n-2;i>=0;i--){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){
                st.pop();
            }

            if(st.size()==0){
                rightsmaller[i]=n;
            }
            else{
                rightsmaller[i]=st.peek();
            }

            st.push(i);
        }
        int[] leftsmaller = new int[n];

            st= new Stack<>();
                leftsmaller[0] = -1;
                st.push(0);

        for(int i=1;i<n;i++){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){
                st.pop();
            }

            if(st.size()==0){
                leftsmaller[i]=-1;
            }
            else{
                leftsmaller[i]=st.peek();
            }

            st.push(i);
        }


        int maxArea=0;

        for(int i=0;i<n;i++){
            int width = rightsmaller[i]-leftsmaller[i]-1;
            int area = width*arr[i];

            maxArea=Math.max(maxArea,area);
        }
        return maxArea;
    }