//memoization

tc: o(n)
sc:o(n)

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        
        int [] t = new int[cost.length+1];
        Arrays.fill(t,-1);
        //1 d array becayse 1 vairable is changing 
        return Math.min(solve(0, cost,t),solve(1,cost,t));

    }

    public int solve(int idx, int [] cost,int [] t){

        //base
        if(idx>=cost.length){
            return 0;
        }

        if(t[idx]!=-1){
            return t[idx];
        }

        int one_step=cost[idx]+solve(idx+1,cost,t);
        int two_step=cost[idx]+solve(idx+2,cost,t);

        return t[idx]=Math.min(one_step,two_step);
    }
}


//bottom up

Since the "top" is conceptually outside the array, 
you don't need to allocate space for it. Thus, an n-sized DP array is sufficient for this problem.

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        
        int n = cost.length;

        int [] t=new int[n];

            t[0]=cost[0];
            t[1]=cost[1];

        for(int i=2;i<n;i++){
            t[i]= cost[i]+ Math.min(t[i-1], t[i-2]);
        }



        return 0+ Math.min(t[n-1], t[n-2]);

    }

}


