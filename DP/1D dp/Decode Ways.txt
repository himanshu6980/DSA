class Solution {
    public int numDecodings(String s) {
        int n = s.length();

        int [] t=new int[n+1];

        Arrays.fill(t,-1);
        return solve(0,n,s,t);
    }

    public int solve(int idx, int n , String s,int [] t){

        if(idx>=n){
            return 1; //end tk reached
        }

        if(s.charAt(idx)=='0'){
            return 0; //not possible to split
        }

        if(t[idx]!=-1){
            return t[idx];
        }

        int one_char=solve(idx+1,n,s,t);

        int two_char=0;

        if(idx+1 < n){
            if(s.charAt(idx)=='1' || (s.charAt(idx)=='2' && s.charAt(idx+1)<='6')){
            two_char=solve(idx+2,n,s,t);
            }
        }

        return t[idx]= one_char+two_char;
    }
}


bottom up:


class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int [] t = new int[n+1];
        // t[i]-> no of decode ways from index i to n
        t[n]=1;

        //as result is deend on idx+1 and idx+2 that why reverse loop

        for(int i=n-1;i>=0;i--){

            if(s.charAt(i)=='0'){
                t[i]=0;
            }
            else{
                t[i]=t[i+1];
                if(i+1< n){
                     if(s.charAt(i)=='1' || (s.charAt(i)=='2' && s.charAt(i+1)<='6')){
                    t[i]+=t[i+2];
                    }
                }
            }

        }

        return t[0];
    }
}

