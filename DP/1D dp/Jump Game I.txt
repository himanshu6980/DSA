greddy :  tc: o(n)

class Solution {
    public boolean canJump(int[] nums) {
        //greedy

        int maxcango=0;
        for(int i=0;i<=maxcango;i++){
            maxcango=Math.max(maxcango,i+nums[i]);

            if(maxcango>=nums.length-1){
                return true;
            }
        }

        return false;
    }
}




recursion + memoize 

recursion - tc: o(2^n)
memoize - tc: O(n^2)
(tries from index 0) + (tries from index 1) + ... + (tries from index n-1)
â‰ˆ 1 + 2 + 3 + ... + (n-1) = (n*(n-1))/2

class Solution {
    public boolean canJump(int[] nums) {
        Boolean[] dp = new Boolean[nums.length];  //dp[i] = true can reach index i 

        return solve(nums, 0,dp);
    }

    public boolean solve(int [] nums, int index,Boolean[] dp){
        if(index>=nums.length){
            return false;
        }

        if(index==nums.length-1){
            return true;
        }
        if (dp[index] != null) {
            return dp[index];
            }

        int jump=nums[index];

        for(int i=1;i<=jump;i++){
            if(solve(nums,index+i,dp)){
                dp[index]=true;
                return true;
            }
        }
        dp[index]=false;

        return false;


    }
}


top down: o(n^2)

class Solution {
    public boolean canJump(int[] nums) {
        Boolean[] dp = new Boolean[nums.length];

        Arrays.fill(dp,false);
        dp[0]=true;

        for(int i=1;i<nums.length;i++){

            for(int j=i-1;j>=0;j--){
                if(dp[j]==true && j+nums[j]>=i){
                    dp[i]=true;
                    break;
                }
            }
        }

        return dp[nums.length-1];



    }
}
