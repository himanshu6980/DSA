tc: o(n^2) 

class Solution {
    public int countSubstrings(String s) {
      int n= s.length();
        int count=0;

        int [][] t = new int [n+1][n+1];

        for(int i=0;i<t.length;i++){
            Arrays.fill(t[i], -1);
        }

        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){

                if(isPalindrom(s,i,j,t)==1){
                        count++;
                }
            }
        }

        return count;
    }

    public int isPalindrom(String s , int i , int j , int [][] t){

        if(i>=j){
            //i corssed j
            return 1;
        }
        if(t[i][j] !=-1){
            return t[i][j];
        }

        if(s.charAt(i)==s.charAt(j)){
           return  t[i][j]= isPalindrom(s,i+1,j-1,t);
        }

        return 0;
    }
}



bottom up :

tc: o(n^2)


class Solution {
    public int countSubstrings(String s) {
        int n = s.length();

           int[][] t = new int[n][n];

         //t[i][j] if 1 --> i to j is palindrom

                 int count=0;


        // Single character palindromes
        for (int i = 0; i < n; i++) {
            t[i][i] = 1; //single character
            count++;
        }


        // Check substrings of length greater than 1
        for (int L = 2; L <= n; L++) {
            for (int i = 0; i < n - L + 1; i++) {

                // j should be j<n
                //i+L-1 < n --> i< n-L+1
                int j = i + L - 1;

                // Check if the substring s[i..j] is a palindrome
                if (s.charAt(i) == s.charAt(j)) {
                    if (L == 2 || t[i + 1][j - 1] == 1) {
                        t[i][j] = 1; // Mark it as a palindrome
                       
                    }
                }
                else {
                    t[i][j] = 0; // Not a palindrome
                }

                if(t[i][j]==1){
                    count++;
                }
            }
        }

        return count;
    }
}


