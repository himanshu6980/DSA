

normal recursion : 2^n 

tc:o(n) sc: o(n)
//memoization

  class Solution {
    public int climbStairs(int n) {
        int[]t = new int[n+1];
        Arrays.fill(t,-1);

        return solve(n,t);
       
    }

    public int solve(int n , int[]t){
         if(n<0){
            return 0;
        }

        if(n==0){
            return 1;
        }

        if(t[n] !=-1){
            return t[n];
        }

        int one_step=solve(n-1,t);
        int two_step=solve(n-2,t);
        return t[n] = one_step+two_step;
    }
}


bottom up
tc:o(n) sc: o(1)

class Solution {
    public int climbStairs(int n) {
        if (n <= 1) {
            return 1;
        }

        int prev2 = 1; // Ways to climb 0 stairs
        int prev1 = 1; // Ways to climb 1 stair

        for (int i = 2; i <= n; i++) {
            int current = prev1 + prev2; // Current step depends on the last two steps
            prev2 = prev1;
            prev1 = current;
        }

        return prev1;
    }
}


