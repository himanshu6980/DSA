//tabulation tc: o(n*m) sc : o(n*m)
//memoization // tc: o(n*m) sc : o(n*m) + o(n*m)


class Solution
{
    //Function to find the length of longest common subsequence in two strings.
    static int lcs(int x, int y, String s1, String s2)
    {
        // your code here
      int [][] t = new int[x+1][y+1];
      
    //   for(int i=0;i<x+1;i++){
    //       for(int j=0;j<y+1;j++){
    //           t[i][j] = -1;
    //       }
    //   }
    //   //memoization
    //   return LCSDP(x,y,s1,s2,t);
    
    for(int i=0;i<x+1;i++){
        
        for(int j =0;j<y+1;j++){
            
            if(i==0 || j==0){
                t[i][j] = 0;
            }
        }
    }
    
    for(int i=1;i<x+1;i++){
        
        for(int j=1;j<y+1;j++){
            
            if(s1.charAt(i-1) == s2.charAt(j-1)){
                t[i][j] = 1+t[i-1][j-1];
            }
            else{
                t[i][j] = Math.max(t[i-1][j] , t[i][j-1]);
            }
        }
    }
    
    //print lcs
    
    String res= "";
    
    int i = x;
    int j = y;
    
    while(i>0 && j>0){
        
        if(s1.charAt(i-1) == s2.charAt(j-1)){
            res+=s1.charAt(i-1);
            i--;j--;
        }
        else{
            if(t[i][j-1]>t[i-1][j]){
                j--;
            }
            else{
               i--; 
            }
        }
    }
    
      StringBuilder input1 = new StringBuilder();
        input1.append(res);
        input1.reverse();
    
    System.out.println("LCS : "+ input1);
    
    return t[x][y];
    
     
    }
    
    static int LCSDP(int x, int y, String s1, String s2 , int[][] t){
        
         if(x==0 || y==0){
            return 0;
        }
        
        if(t[x][y] != -1){
            return t[x][y];
        }
        
        int lcs2 =0;
        
        if(s1.charAt(x-1) == s2.charAt(y-1)){
            lcs2= 1+LCSDP(x-1,y-1,s1,s2,t);
        }
        else{
            lcs2= Math.max(LCSDP(x-1,y , s1,s2,t) , LCSDP(x,y-1,s1,s2,t));
        }
        
        return t[x][y]=lcs2;
    }
    
    
}