

min no of deletion = min no of insertion = len(String) - length(LPS)



class Solution {
    public int minInsertions(String s1) {
        
      StringBuffer s3 = new StringBuffer(s1);
        String s2 = new String(s3.reverse());
		
		//LPS
        
        int lps=longestCommonSubsequence(s1,s2);
        
        int mininsert=s1.length()-lps;
        
        return mininsert;
    }
    
    public  int longestCommonSubsequence(String s1, String s2) {
        
        int [][] t = new int[s1.length()+1][s2.length()+1];

        for(int i=0;i<t.length;i++){
                Arrays.fill(t[i],-1);
        }
        return solve(0,0,s1,s2,t);
    }

    public  int solve(int i, int j , String s1, String s2, int [][] t){

        if(i>=s1.length() || j>=s2.length()){
            return 0; //no more charater
        }

        if(t[i][j]!=-1){
            return t[i][j];
        }

        if(s1.charAt(i)==s2.charAt(j)){
            return t[i][j]= 1+solve(i+1,j+1,s1,s2,t);
        }
        else{
            return t[i][j]= Math.max(solve(i+1,j,s1,s2,t), solve(i,j+1,s1,s2,t));
        }
    }

}