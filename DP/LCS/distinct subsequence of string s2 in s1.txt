 s1="babgbag" s2="bag"  o/p==> 5
 
 //recursion + memoization 

tc: o(n*m) sc: o(n*m)+o(n*m) 
  
class Solution {
    public int numDistinct(String s, String t) {

        int [][] tt= new int [s.length()+1][t.length()+1];

        for(int i=0;i<tt.length;i++){
            Arrays.fill(tt[i],-1);
        }
        return solve(0,0,s,t,tt);
    }

    //t -- j to search  in s --> i

    public int solve(int i, int j , String s , String t,int [][] tt){

        if(j==t.length()){
            return 1; // t ends
        }

        if(i>=s.length()){
            return 0;
        }

        if(tt[i][j] != -1){
            return tt[i][j];
        }

        int take=0;
        int nottake=0;

        if(s.charAt(i)==t.charAt(j)){
		// take and nottake
        take=solve(i+1,j+1,s,t,tt)+solve(i+1,j,s,t,tt);
        }
        else{
		// if not match anyway more forward
         nottake=solve(i+1,j,s,t,tt);
        }


        return tt[i][j]= take+nottake;

    }
}
	
	
	
	
//tabulation tc: o(n*m) sc: o(n*m)


 public static int subsequenceCounting(String s1, String s2, int lt, int ls) {
    int n = s1.length();
    int m = s2.length();
    int dp[][]=new int[n+1][m+1];
	
	//  if s2 length-> 0 Initialize the first column with 1 because there's one empty subsequence in any string.
    
    for(int i=0;i<n+1;i++){
        dp[i][0]=1;
    }
    for(int i=1;i<m+1;i++){
        dp[0][i]=0;
    }
    
    for(int i=1;i<n+1;i++){
        for(int j=1;j<m+1;j++){
            
            if(s1.charAt(i-1)==s2.charAt(j-1))
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]);
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    
    
    return dp[n][m];
    }