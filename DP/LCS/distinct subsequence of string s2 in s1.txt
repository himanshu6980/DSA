 s1="babgbag" s2="bag"  o/p==> 5
 
 //recursion + memoization 

tc: o(n*m) sc: o(n*m)+o(n*m) 
  
  public int numDistinct(String s, String t) {
          int n = s.length();
        int m = t.length();
        if(n < m) return 0;
        int[][] dp = new int[n][m];
        for(int[] a : dp){
             Arrays.fill(a, -1);
        }
        return helper(n-1, m-1, s, t, dp);
    }
    
    public int helper(int i, int j, String s, String t, int[][] dp){
        if(j < 0) return 1;
        if(i < 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        if(s.charAt(i) == t.charAt(j)){
            return dp[i][j] =  helper(i-1, j-1, s, t, dp) + helper(i-1, j, s, t, dp);
        }
        else return dp[i][j] = helper(i-1, j, s, t, dp);
    }
	
	
	
	
//tabulation tc: o(n*m) sc: o(n*m)


 public static int subsequenceCounting(String s1, String s2, int lt, int ls) {
    int n = s1.length();
    int m = s2.length();
    int dp[][]=new int[n+1][m+1];
    
    for(int i=0;i<n+1;i++){
        dp[i][0]=1;
    }
    for(int i=1;i<m+1;i++){
        dp[0][i]=0;
    }
    
    for(int i=1;i<n+1;i++){
        for(int j=1;j<m+1;j++){
            
            if(s1.charAt(i-1)==s2.charAt(j-1))
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j])%prime;
            else
                dp[i][j] = dp[i-1][j];
        }
    }
    
    
    return dp[n][m];
    }