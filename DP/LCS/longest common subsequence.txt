//tabulation tc: o(n*m) sc : o(n*m)
//memoization // tc: o(n*m) sc : o(n*m) + o(n*m)

m and n are lenth of strings


class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        
        int [][] t = new int[s1.length()+1][s2.length()+1];

        for(int i=0;i<t.length;i++){
                Arrays.fill(t[i],-1);
        }
        return solve(0,0,s1,s2,t);
    }

    public int solve(int i, int j , String s1, String s2, int [][] t){

        if(i>=s1.length() || j>=s2.length()){
            return 0; //no more charater
        }

        if(t[i][j]!=-1){
            return t[i][j];
        }

        if(s1.charAt(i)==s2.charAt(j)){
            return t[i][j]= 1+solve(i+1,j+1,s1,s2,t);
        }
        else{
            return t[i][j]= Math.max(solve(i+1,j,s1,s2,t), solve(i,j+1,s1,s2,t));
        }
    }
}

bottom up 


class Solution {
    public int longestCommonSubsequence(String s1, String s2) {

     int m = s1.length();
     int n = s2.length();

     int [][] t = new int[m+1][n+1];

     //t[i][j] ==> longest common subsequence between string of i and j length

      t[0][0]=0;

    for(int i=0;i<m+1;i++){
        
        for(int j =0;j<n+1;j++){
            
            if(i==0 || j==0){
                t[i][j] = 0;
            }
        }
    }


      for(int i=1;i<m+1;i++){
        
        for(int j =1;j<n+1;j++){
            
            if(s1.charAt(i-1) == s2.charAt(j-1)){
                t[i][j] = 1+t[i-1][j-1];
            }
            else{
                t[i][j] = Math.max(t[i-1][j] , t[i][j-1]);
            } 
          
        }
    }


     return t[m][n]; 
    }
}

