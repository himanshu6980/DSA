tc: o(n*m) sc:  O(N*M) + O(N+M)

class Solution {
    public int minDistance(String str1, String str2) {
     int[][] t = new int[str1.length()][str2.length()];

        for(int i=0;i<t.length;i++){
            Arrays.fill(t[i], -1);
        }
        
        return f(str1.length()-1, str2.length()-1 , str1,str2,t);
    }

    static int f(int i, int j , String str1 , String str2,int[][]t){

        if(i<0){   //s1 exhausted --> add all of s2 
            return j+1;
        }

        if(j<0){  //s2 exhausted --> add all of s1
            return i+1;
        }

        if(t[i][j]!= -1){
            return t[i][j];
        }

        if(str1.charAt(i)==str2.charAt(j)){
            return t[i][j]= 0+ f(i-1,j-1,str1,str2,t);
        }
        else{
            int in = 1 + f(i,j-1,str1,str2,t); //extra char we are adding in s1 
            int d = 1+ f(i-1,j,str1,str2,t);  // deleting from s1 
            int r = 1+ f(i-1,j-1, str1,str2,t); //replace will match

            return t[i][j]= Math.min(in , Math.min(d,r));
        }
}

}


//tabulation 

static int editDistance(String S1, String S2){
    
    int n = S1.length();
    int m = S2.length();
    
    int[][] dp=new int[n+1][m+1];
     for(int i=0;i<=n;i++){
        dp[i][0] = i;
    }
    for(int j=0;j<=m;j++){
        dp[0][j] = j;
    }
    
    for(int i=1;i<n+1;i++){
        for(int j=1;j<m+1;j++){
            if(S1.charAt(i-1)==S2.charAt(j-1))
            if(S1.charAt(i-1)==S2.charAt(j-1))
                dp[i][j] = 0+dp[i-1][j-1];
            
            else dp[i][j] = 1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
        }
    }
    
    return dp[n][m];
}