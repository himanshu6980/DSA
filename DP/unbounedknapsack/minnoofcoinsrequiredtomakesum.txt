Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

t: n*Sum s: n*Sum


recussion + memo 


class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int [][] t= new int[n+1][amount+1];
		
		t[i][j] = Minimum number of coins needed to make `j` using the first `i` coins.


        for(int i=0;i<t.length;i++){
            Arrays.fill(t[i],-1);
        }
        int result = solve(0, amount, coins, n,t);
        return result == Integer.MAX_VALUE ? -1 : result; 
    }

    public int solve(int idx, int amount, int[] coins, int n,int [][] t) {
        if (amount == 0) return 0; 
        if (amount < 0 || idx >= n) return Integer.MAX_VALUE; 

        if(t[idx][amount]!=-1){
            return t[idx][amount];
        }
     
        int notTake = solve(idx + 1, amount, coins, n,t);
        int take = Integer.MAX_VALUE;
         if (coins[idx] <= amount) {
           int res= solve(idx, amount - coins[idx], coins, n,t);
           if(res !=  Integer.MAX_VALUE){
              // avoid integer overflow
                take=1+res;
           }
         
        }
        return t[idx][amount]=Math.min(take, notTake);
    }
}



class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int [][] t = new int[n+1][amount+1];
	    
	    
	    for(int j=0;j<amount+1;j++){
	        t[0][j] = Integer.MAX_VALUE;
	    }
	    
	     for(int i=0;i<n+1;i++){
	        t[i][0] = 0;
	    }

        for(int i=1;i<n+1;i++){
            for(int j=1;j<amount+1;j++){

                //not take
                t[i][j]=t[i-1][j];

                //take
            
                if(coins[i-1]<=j){
                    int take=t[i][j-coins[i-1]];
                    if(take !=Integer.MAX_VALUE){
                        t[i][j]= Math.min(1+take, t[i][j]);
                    }
                }
            }
        }

         return t[n][amount] == Integer.MAX_VALUE ? -1 : t[n][amount];
	    
    }
}

t: n*Sum s: o(Sum)

    public int coinChange(int[] coins, int sum) {
         int n = coins.length;
           int [] t = new int[sum+1];
	    
	    
	    for(int j=1;j<sum+1;j++){
	        t[j] = Integer.MAX_VALUE -1;
	    }
	        t[0] = 0;
	    
	             for(int i=1;i<n+1;i++){
                       for(int j=1;j<sum+1;j++){
	            if(coins[i-1]<=j){
					t[j] = Math.min(t[j - coins[i-1]] + 1, t[j]);
	            }
	      
	        }
	    }
	    

	    if(t[sum] != Integer.MAX_VALUE -1 ){
	        return t[sum];
	    }
	    else{
	        return -1;
	    }
    }