Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

t: n*Sum s: n*Sum

public int minCoins(int coins[], int n, int sum) 
	{ 
	    int [][] t = new int[n+1][sum+1];
	    
	    
	    for(int j=0;j<sum+1;j++){
	        t[0][j] = Integer.MAX_VALUE -1;
	    }
	    
	     for(int i=0;i<n+1;i++){
	        t[i][0] = 0;
	    }
	    
	    
	    for(int i=1;i<n+1;i++){
	        for(int j=1;j<sum+1;j++){
	            
	            if(coins[i-1]<=j){
	                
	                t[i][j] = Math.min( t[i-1][j] +0 , t[i][j-coins[i-1]]+1);
	            }
	            else{
	                t[i][j] = t[i-1][j];
	            }
	        }
	    }
	    

	    if(t[n][sum] != Integer.MAX_VALUE -1 ){
	        return t[n][sum];
	    }
	    else{
	        return -1;
	    }
	    
	}


t: n*Sum s: o(Sum)

    public int coinChange(int[] coins, int sum) {
         int n = coins.length;
           int [] t = new int[sum+1];
	    
	    
	    for(int j=1;j<sum+1;j++){
	        t[j] = Integer.MAX_VALUE -1;
	    }
	        t[0] = 0;
	    
	             for(int i=1;i<n+1;i++){
                       for(int j=1;j<sum+1;j++){
	            if(coins[i-1]<=j){
					t[j] = Math.min(t[j - coins[i-1]] + 1, t[j]);
	            }
	      
	        }
	    }
	    

	    if(t[sum] != Integer.MAX_VALUE -1 ){
	        return t[sum];
	    }
	    else{
	        return -1;
	    }
    }