maximizie rod cutting profit


t: n*N s: n*N

  public int cutRod(int price[], int N) {
        //code here
        
        int n = price.length;
        
        int[] length = new int[N];
        
        for(int i=0;i<N;i++){
            length[i] = i+1;
        }
		
		// A DP table where t[i][j] stores the maximum obtainable price using the first i pieces for a rod of length j
        
        int [][] t = new int[n+1][N+1];
        
      	  //when no rod pieces are available, the profit is 0
	    for(int j=0;j<N+1;j++){
	        t[0][j]=0;
	    }
	    
	    //when rod length is 0, the profit is 0
	    for(int i=0;i<n+1;++i){
	        
	        t[i][0] = 0;
	        
	    }
	    
	    for(int i=1;i<n+1;i++){
	        for(int j=1;j<N+1;j++){
	            
	            if(length[i-1]<=j){
	                t[i][j] = Math.max(t[i-1][j] , price[i-1] + t[i][j-length[i-1]]);
	            }
	            else{
	                t[i][j] = t[i-1][j];
	            }
	        }
	    }
	    
	    return t[n][N];
    }
	
	
	// s: o(N) t: o(n*N)
	
	   public int cutRod(int price[], int N) {
       int n = price.length;
    int[] t = new int[N+1];
      int[] length = new int[N];
        
        for(int i=0;i<N;i++){
            length[i] = i+1;
        }
        
    
    for(int i=1; i<=n; i++){
        for(int j=1; j<=N; j++){
            if(length[i-1]<=j){
            t[j] = Math.max(t[j], price[i-1] + t[j-length[i-1]]);
            }
        }
    }
    
    return t[N];
    }