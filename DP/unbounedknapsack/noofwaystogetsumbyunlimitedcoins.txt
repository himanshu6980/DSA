sum = 4 , 
N = 3
coins[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.

 //tc: : O(sum*N) space: : O(sum*N)
  public long count(int coins[], int n, int sum) {
        
      long [][] t =new long[n+1][sum+1];
       
       for(int j=0;j<sum+1;j++){
           t[0][j]= 0;
       }
       for(int i=0;i<n+1;i++){
        t[i][0] = 1;     
       }
       
       for(int i=1;i<n+1;i++){
           for(int j=1;j<sum+1;j++){
               
               if(coins[i-1]<=j){
                   
                   t[i][j] = t[i-1][j] + t[i][j-coins[i-1]];
               }
               else{
                   t[i][j] = t[i-1][j];
               }
           }
       }
       
       return t[n][sum];
    }
	
	
	 t: 0(n*Sum) s: O(sum)
	 public long count(int coins[], int n, int sum) {
        
      long [] t =new long[sum+1];
       
       for(int j=0;j<sum+1;j++){
           t[j]= 0;
       }
		t[0]=1;  // sum=0 coins=0 , one way to acheive sum=0

       for(int i=1;i<n+1;i++){
           for(int j=1;j<sum+1;j++){
               
               if(coins[i-1]<=j){
                   
                  t[j] = Math.max(t[j],  t[j]+t[j-coins[i-1]]);
               }
       
           }
       }
       
       return t[sum];
    }