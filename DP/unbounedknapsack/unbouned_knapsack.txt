  	// t : o(n*W) S: o(n*W)
  static int knapSack(int n, int W, int val[], int wt[])
    {
        int [][]t = new int[n+1][W+1];
        
   for(int i=0;i<n+1;i++){
       
       for(int j=0;j<W+1;j++){
           
           if(i==0 || j==0){
               t[i][j] =0;
           }
       }
   }
        
        //Choice Diagram to code
        for(int i = 1; i<n+1; i++){
            for(int j=1; j<W+1; j++){
                //1. In case of choice
                if(wt[i-1] <= j){
                    t[i][j] = Math.max(val[i-1] + t[i][j-wt[i-1]], 0+t[i-1][j]);
                }
                //2. No choice
                else if(wt[i-1] > j){
                    t[i][j] = 0+t[i-1][j];
                }
            }
        }
        return t[n][W];
        
    }
	
	
	// t : o(n*W) S: o(W)
	
 static int knapSack(int n, int W, int val[], int wt[])
    {
       int []t = new int[W+1];
        
        for(int j=0; j<W+1; j++){
            t[j] = 0;
        }
        for(int i = 1; i<n+1; i++){
            int []temp = new int[W+1];
            for(int j=0; j<W+1; j++){
                if(wt[i-1] <= j){
             temp[j] = Math.max(val[i-1] + temp[j-wt[i-1]], t[j]);
                }
                else {
            temp[j] = t[j];
                }
            }       
            t = temp;
        }
return t[W];
    }