// todetermine with certainity (estimation) take min of worst
eg manager want to take certain deadline (max time of resourse)


tc :O(n*k^2) sc: O(N*K)

    static int eggDrop(int n, int k) 
	{   
	    int t[][] = new int [n+1][k+1];
	    
	    for(int i=0;i<t.length;i++){
	        Arrays.fill(t[i] ,-1);
	    }
	    
	    return solve(n,k,t);
	}
	
	static int solve(int e ,int f,int[][]t){
	    
	    if(f==0 || f==1){
	        return f;
	    }
	    
	    if(e==1){
	        return f;
	    }
	    
	    if(t[e][f] !=-1){
	        return t[e][f];
	    }
	    
	    int ans = Integer.MAX_VALUE;
	    
	    for(int k=1;k<=f;k++){
	       int down, top;

            if (t[e - 1][k - 1] != -1) {
                down = t[e - 1][k - 1];
            } else {
                down = solve(e-1,k-1,t);
            }

            if (t[e][f - k] != -1) {
                top = t[e][f - k];
            } else {
                top = solve(e,f-k,t);
            }

            int temp = 1 + Math.max(down, top);
	        ans = Math.min(ans,temp);
	    }
	    
	    t[e][f] = ans;
	    
	    return t[e][f];
	}
	
	
	
	//for leetcode use binary search
	
	
	class Solution {
    public int superEggDrop(int n, int k) {
          int t[][] = new int [n+1][k+1];
	    
	    for(int i=0;i<t.length;i++){
	        Arrays.fill(t[i] ,-1);
	    }
	    
	    return solve(n,k,t);
    }

    	static int solve(int e ,int f,int[][]t){
	    
	    if(f==0 || f==1){
	        return f;
	    }
	    
	    if(e==1){
	        return f;
	    }
	    
	    if(t[e][f] !=-1){
	        return t[e][f];
	    }
	    
	    int ans = Integer.MAX_VALUE;
	    int left = 1, right = f;
	    while(left <= right){
	       int down, top;
           int k = left + (right-left)/2;

            if (t[e - 1][k - 1] != -1) {
                down = t[e - 1][k - 1];
            } else {
                down = solve(e-1,k-1,t);
            }

            if (t[e][f - k] != -1) {
                top = t[e][f - k];
            } else {
                top = solve(e,f-k,t);
            }

            int temp = 1 + Math.max(down, top);
	        ans = Math.min(ans,temp);

        if(down < top) 
          {
              left = k + 1;
        }
        else {
            right = k-1;
            }
	    }
	    
	    t[e][f] = ans;
	    
	    return t[e][f];
	}
}