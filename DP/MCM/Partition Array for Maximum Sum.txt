public int maxSumAfterPartitioning(int[] arr, int k) {
        tc: o(n*k) sc: o(n)+o(n)
        int[] dp = new int[arr.length];

        Arrays.fill(dp,-1);
        
        return f(0,arr,k,dp);
    }

    static int f(int ind , int[] arr, int k, int[] dp){
        if(ind==arr.length){
            return 0;
        }

        if(dp[ind] !=-1){
            return dp[ind];
        }

        int maxSum= Integer.MIN_VALUE;

        int maxNum= Integer.MIN_VALUE;

        int lenpartiotn =0;

        for(int j=ind;j<Math.min(arr.length , ind+k);j++){
            lenpartiotn++;

            maxNum= Math.max(maxNum, arr[j]);

            int sum = lenpartiotn*maxNum + f(j+1, arr,k,dp);

            maxSum= Math.max(maxSum, sum);

        }

        return dp[ind] = maxSum;
    }