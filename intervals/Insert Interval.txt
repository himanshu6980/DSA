Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
tc: o(n)

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        int n = intervals.length;
        List<int[]> ans = new LinkedList<>();
        int i = 0;
        //left part which do not have overlap
        while (i < n && intervals[i][1] < newInterval[0]) {
            ans.add(intervals[i]);
            i = i + 1;
        }
        //center part which could have overlap

        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = Math.min(intervals[i][0], newInterval[0]);
            newInterval[1] = Math.max(intervals[i][1], newInterval[1]);
            i = i + 1;
        }
        ans.add(newInterval);
        //right part which not have overlap

        while (i < n) {
            ans.add(intervals[i]);
            i = i + 1;
        }

        return ans.toArray(new int[ans.size()][]);

    }
}