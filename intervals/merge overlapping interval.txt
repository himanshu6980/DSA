tc: o(nlogn)

class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length == 0) return new int[0][];

        // 1. Sort intervals by start time to get correct overlapping
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

        List<int[]> merged = new ArrayList<>();
        int[] last = intervals[0]; // Track the last interval directly

        for (int i = 1; i < intervals.length; i++) {
            int[] current = intervals[i];

            // 2. If current interval overlaps with last, merge them
            if (current[0] <= last[1]) {
                last[1] = Math.max(last[1], current[1]); // Extend the end time
            } 
            // 3. Else, add last to merged and update last to current
            else {
                merged.add(last);
                last = current;
            }
        }

        merged.add(last); // Add the final last interval
        return merged.toArray(new int[merged.size()][]);
    }
}