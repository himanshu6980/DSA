/**
 * Definition of Interval:
 * public class Interval {
 *     public int start, end;
 *     public Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 * }
 */
 
 tc: nlogn

class Solution {
    public boolean canAttendMeetings(List<Interval> intervals) {

    if (intervals == null || intervals.size() == 0) return true;

               
               
     Collections.sort(intervals, Comparator.comparingInt(i -> i.end));

       int last=intervals.get(0).end;
        boolean canAttendMeetings=true;

        for(int i=1;i<intervals.size();i++){
            if(intervals.get(i).start>=last){
         
                last=intervals.get(i).end;
            }else{

                return false;
                
            }
        }
        return canAttendMeetings;

    }
}


meeting room II

tc: nlogn

/**
 * Definition of Interval:
 * public class Interval {
 *     public int start, end;
 *     public Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 * }
 */

class Solution {
    public int minMeetingRooms(List<Interval> intervals) {

        if (intervals == null || intervals.size() == 0) return 0;

      // Sort by start time
        intervals.sort(Comparator.comparingInt(i -> i.start));

        // Min-heap to track end times of meetings
        PriorityQueue<Integer> heap = new PriorityQueue<>();

        // Add the end time of the first meeting
        heap.offer(intervals.get(0).end);

        for (int i = 1; i < intervals.size(); i++) {
            // If the current meeting starts after or when the earliest meeting ends, 
            //reuse the room
            if (intervals.get(i).start >= heap.peek()) {
                heap.poll();
            }
            // Add the current meeting's end time
            heap.offer(intervals.get(i).end);
        }

          // The size of the heap is the number of rooms needed
        return heap.size();

    }
}
