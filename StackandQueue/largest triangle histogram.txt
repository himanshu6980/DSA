class Solution {
    public int largestRectangleArea(int[] heights) {
        //arr[i]* (nse-pse-1)   if nse is not these then equals n , pse if not -1

        // int n = heights.length;

        // // Compute Previous Smaller Elements (PSE)
        // int[] pse = new int[n];
        // Stack<Integer> stack = new Stack<>();
        // for (int i = 0; i < n; i++) {
        //     while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
        //         stack.pop();
        //     }
        //     pse[i] = stack.isEmpty() ? -1 : stack.peek();
        //     stack.push(i);
        // }

        // // Compute Next Smaller Elements (NSE)
        // int[] nse = new int[n];
        // stack = new Stack<>();
        // for (int i = n - 1; i >= 0; i--) {
        //     while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
        //         stack.pop();
        //     }
        //     nse[i] = stack.isEmpty() ? n : stack.peek();
        //     stack.push(i);
        // }

        // // Calculate the largest rectangle area
        // int maxArea = 0;
        // for (int i = 0; i < n; i++) {
        //     int width = nse[i] - pse[i] - 1;
        //     int area = heights[i] * width;
        //     maxArea = Math.max(maxArea, area);
        // }

        // return maxArea;

      Stack<Integer> st = new Stack<>();
        int maxArea = 0;

        for (int i = 0; i < heights.length; i++) {
            //stack is used to keep track of indices of histogram bars in an increasing order of heights.
            while (!st.isEmpty() && heights[st.peek()] > heights[i]) {
                int element = st.pop(); 
                int nse = i;
                int pse = st.isEmpty() ? -1 : st.peek();

                maxArea = Math.max(heights[element] * (nse - pse - 1), maxArea);
            }
            st.push(i);
        }

        //remaining left 

        while (!st.isEmpty()) {
            int element = st.pop();
            int nse = heights.length;
            int pse = st.isEmpty() ? -1 : st.peek();

            maxArea = Math.max(heights[element] * (nse - pse - 1), maxArea);
        }

        return maxArea;





    }

    
}