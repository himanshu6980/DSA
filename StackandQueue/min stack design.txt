class MinStack {
    Stack < Pair > st;

    public MinStack() {
        st=new Stack<>();
    }
    
    public void push(int val) {
        int min;
        if (st.isEmpty()) {
            min = val;
        } else {
            min = Math.min(st.peek().y, val);
        }
        st.push(new Pair(val, min));
    }
    
    public void pop() {
        st.pop();
    }
    
    public int top() {
        return st.peek().x;
    }
    
    public int getMin() {
        return st.peek().y;
    }
}

 class Pair {
    int x, y;
    Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}


==============


class MinStack {
    private ArrayList<Integer> list;
    private ArrayList<Integer> minList;
    private int size;
    
    public MinStack() {
        list = new ArrayList<>();
        minList = new ArrayList<>();
        size = 0;
    }
    
    public void push(int val) {
        list.add(val);
        if (size == 0) {
            minList.add(val);
        } else {
            // Push the smaller of the current value and the current minimum to minList
            minList.add(Math.min(val, minList.get(size - 1)));
        }
        size++;
    }
    
    public void pop() {
        if (size > 0) {
            list.remove(size - 1);
            minList.remove(size - 1);
            size--;
        }
    }
    
    public int top() {
        if (size > 0) {
            return list.get(size - 1);
        }
        return -1;  // or throw an exception
    }
    
    public int getMin() {
        if (size > 0) {
            return minList.get(size - 1);
        }
        return -1;  // or throw an exception
    }
}

 