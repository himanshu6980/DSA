Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

The same number may be chosen from candidates an unlimited number of times

tc :  O(2^t * k) where t is the target, k is the average length
 Space Complexity: O(k*x), k is the average length and x is the no. of combinations


 class Solution {
    public List<List<Integer>> combinationSum(int[] nums, int target) {
        List<List<Integer>> ans =new ArrayList<>();
        List<Integer> templist=new ArrayList<>();

         f(nums, target, 0, templist,ans);
         return ans;
    }

    public void  f(int [] nums, int target, int idx, List<Integer> templist
    , List<List<Integer>> ans){

        if(target< 0 || idx>=nums.length){
            return ;
        }

        if(target==0){
            ans.add(new ArrayList<>(templist));
            return ;
        }

        if(nums[idx]<=target){
            //include and not increasing idx becaue unlimited
            templist.add(nums[idx]);
            f(nums, target-nums[idx],idx,templist,ans);
            templist.remove(templist.size()-1);
        }

        //exclude

        f(nums, target, idx+1, templist,ans);
    }
}