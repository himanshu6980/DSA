Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
 
 class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
         List<List<Integer>> ans =new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean [] freq = new boolean[nums.length];
         Arrays.sort(nums);
        getPermutations(nums,ans,ds,freq);
        
        return ans;
    }

        public void  getPermutations(int [] nums,List<List<Integer>> ans,List<Integer> ds,boolean [] freq){
        
        // recursion end
        
        if(ds.size()==nums.length){
            ans.add(new ArrayList<>(ds));
         return;
        }
        
        for(int i=0;i<nums.length;i++){
   
                if(i > 0 && nums[i] == nums[i - 1] && !freq[i-1]) {
                    continue;
                }
                if(freq[i]){
                    continue;
                }
                freq[i]=true;
                ds.add(nums[i]);
                getPermutations(nums,ans,ds,freq);
                ds.remove(ds.size()-1);
                freq[i]=false;
            
        }
        
    }
}