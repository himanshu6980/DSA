tc: o(n!)
sc: o(n)

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans =new ArrayList<>();

        if(n==0){
            return ans;
        }

        char[][] board = new char[n][n];

        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }

        placeQueen(board,0,n,ans);

        return ans;
    }

    public void placeQueen(char [][] board, int row, int n, List<List<String>> ans){

        if(row>=n){

        List<String> res = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
            ans.add(res);
            return;
        }


        for(int col=0;col<n;col++){
            if(validcelltoplace(board,row,col,n)){
            board[row][col]='Q';
            placeQueen(board, row+1,n,ans);
            board[row][col]='.';
            }
        }
    }

    public boolean validcelltoplace(char [][] board, int row, int col, int n){
        //check upper rows

        for(int i=row-1;i>=0;i--){
            if(board[i][col]=='Q'){
                return false;
            }
        }

          // Check left diagonal upwards
        for (int i = row-1, j = col-1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q')
                return false;
        }

        // Check right diagonal upwards
        for (int i = row-1, j = col+1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q')
                return false;
        }

        return true;
    }
}


//apprach 2

right diaonal i+j same
left diagonal  i-j same



class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans =new ArrayList<>();

        if(n==0){
            return ans;
        }

        char[][] board = new char[n][n];

        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }

        HashSet<Integer> column = new HashSet<>();
        HashSet<Integer> rightDiagonal = new HashSet<>();
        HashSet<Integer> leftDiagonal = new HashSet<>();

        placeQueen(board,0,n,ans, column, rightDiagonal,leftDiagonal);

        return ans;
    }

    public void placeQueen(char [][] board, int row, int n, List<List<String>> ans,
    HashSet<Integer> column, HashSet<Integer> rightDiagonal,HashSet<Integer> leftDiagonal){

        if(row>=n){

        List<String> res = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
            ans.add(res);
            return;
        }


        for(int col=0;col<n;col++){

            if(!column.contains(col) && !rightDiagonal.contains(row+col) 
            && !leftDiagonal.contains(row-col) ){
                //safe to place queen

                
            column.add(col);
            rightDiagonal.add(row+col);
            leftDiagonal.add(row-col);

            board[row][col]='Q';
            placeQueen(board, row+1,n,ans,column,rightDiagonal,leftDiagonal);

            column.remove(col);
            rightDiagonal.remove(row+col);
            leftDiagonal.remove(row-col);

            board[row][col]='.';

            }

       
            
        }
    }

}
