Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

tc : O(2^N * N) sc: o(N)

class Solution {
      List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
       
       List<Integer> res = new ArrayList<>();
     
        f(0 , nums , res);

        return ans;

    }

    void f(int ind , int[] nums , List<Integer> res){

        if(ind>=nums.length){
            ans.add(new ArrayList<>(res));
            return ;
        }

        res.add(nums[ind]); //take
        f(ind+1,nums,res);
        res.remove(res.size()-1); //nottake
        f(ind+1,nums,res);
    }
}


if duplicate
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
           Arrays.sort(nums); // to order duplicate
          List<List<Integer>> res=new ArrayList<>();
        subsequence(0, nums, new ArrayList<>(), res);
        return res;
    }

     static void subsequence(int i,int[] arr, List<Integer> lst, List<List<Integer>> res){
       
        if(i==arr.length){
            // if(!res.contains(lst)){
            res.add(new ArrayList<>(lst));
            // }
            return;
        }
        lst.add(arr[i]);
        subsequence(i+1, arr, lst, res);
        lst.remove(lst.size()-1);
		// While using Don't Pick option, we must ensure we skip all the Duplicate Occurrences of nums[i]
        while(i+1<arr.length && arr[i]==arr[i+1]) i++;
		  // Our i pointer will stop on the last Duplciate Occurencce of nums[i]
        
        // Don't Consider the Element and Ask Recursion to generate Unique Subsets
        subsequence(i+1, arr, lst, res);
    }


}


