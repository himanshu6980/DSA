Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
Each number in candidates may only be used once in the combination

class Solution {
    public List<List<Integer>> combinationSum2(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> templist = new ArrayList<>();
        Arrays.sort(nums); // Sort to handle duplicates
        f(nums, target, 0, templist, ans);
        return ans;
    }

    public void f(int[] nums, int target, int idx, List<Integer> templist, List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList<>(templist)); // Add valid combination
            return;
        }

        if (target < 0 || idx >= nums.length) {
            return; // Terminate recursion if invalid
        }

        // Include the current element
        if(nums[idx]<=target){
        templist.add(nums[idx]);
		//no same number 
        f(nums, target - nums[idx], idx + 1, templist, ans);
        templist.remove(templist.size() - 1);
        }

        // Skip duplicates and move to the next distinct element
        while (idx + 1 < nums.length && nums[idx] == nums[idx + 1]) {
            idx++;
        }

        // Exclude the current element and move to the next
        f(nums, target, idx + 1, templist, ans);
    }
}