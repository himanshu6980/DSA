Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

tc : O(n*n!)
sc: o(n)

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
        // appoarch 1
//         List<List<Integer>> ans =new ArrayList<>();
//         List<Integer> ds = new ArrayList<>();
//         boolean [] freq = new boolean[nums.length];
        
//         getPermutations(nums,ans,ds,freq);
        
//         return ans;
        
        //approach 2
        
        List<List<Integer>> ans =new ArrayList<>();
        
        permute(0,nums,ans);
        
        return ans;
        
    }
    
    
    public void  permute(int index , int [] nums,List<List<Integer>> ans){
        
        if(index==nums.length){
          List<Integer> ds = new ArrayList<>();
            
            for(int i =0;i<nums.length;i++){
                ds.add(nums[i]);
            }
            
            ans.add(new ArrayList<>(ds));
            return;
            
        }
        
        for(int i=index;i<nums.length;i++){
            
            swap(i,index,nums);
            permute(index+1,nums,ans);
               swap(i,index,nums);
        }
        
        
    }
    
    public void swap(int i , int j , int[] nums){
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j]= temp;
        
    }
    
    public void  getPermutations(int [] nums,List<List<Integer>> ans,List<Integer> ds,boolean [] freq){
        
        // recursion end
        
        if(ds.size()==nums.length){
            ans.add(new ArrayList<>(ds));
         return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(!freq[i]){
                freq[i]=true;
                ds.add(nums[i]);
                getPermutations(nums,ans,ds,freq);
                ds.remove(ds.size()-1);
                freq[i]=false;
            }
        }
        
    }
}