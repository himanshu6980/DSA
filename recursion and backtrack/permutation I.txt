Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

tc : O(n*n!)
sc: o(n)


class Solution {
    List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> permute(int[] nums) {
            List<List<Integer>> ans =new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean [] vis = new boolean[nums.length];
        
        getPermutations(nums,ans,ds,vis);

        return ans;
    }

 public void  getPermutations(int [] nums,List<List<Integer>> ans,List<Integer> ds,boolean [] vis){
        
        // recursion end
        
        if(ds.size()==nums.length){
            ans.add(new ArrayList<>(ds));
         return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(!vis[i]){
                vis[i]=true;
                ds.add(nums[i]);
                getPermutations(nums,ans,ds,vis);
                ds.remove(ds.size()-1);
                vis[i]=false;
            }
        }
        
    }
}