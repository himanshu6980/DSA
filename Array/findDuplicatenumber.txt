public int findDuplicate(int[] nums) {

        //approach 1  //t: o(n logn) s: o(1)
        // Arrays.sort(nums);
        // if(nums[i]==nums[i+1]){
        //     return nums[i]
        // }

        //approach 2 tc: o(n) s: o(n)
        // int [] freq=new int[nums.length];
        // int ans=0;
        // for(int i =0;i<nums.length;i++){
        //     if(freq[nums[i]]==1){
        //        ans=nums[i];
        //     }
        //     else{
        //         freq[nums[i]]=1;
        //     }
        // }
        // return ans;

        //t: o(n) s: o(1)
		
		// hair and tortoise because there is duplicacy and traversal

        int slow=nums[0];
        int fast = nums[0];
		
		//cycle detect

        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
		
		//cycle start

        fast=nums[0];
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast]; 
        }

        return slow;
    }
	
	
	
	other ques : tc: o(n) s: o(1)
	
		//mark visited negative
	    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ans=new ArrayList<>();

        for(int i=0;i<nums.length;i++){

            int index=Math.abs(nums[i])-1;

            if(nums[index]<0){
                ans.add(Math.abs(nums[i]));
            }
            nums[index]= -nums[index];
        }

        return ans;
    }