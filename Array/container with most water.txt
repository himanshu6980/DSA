brute force :  tc: o(n^2)

  public int maxArea(int[] nums) {
          int mx = Integer.MIN_VALUE;
    	for(int i = 0; i < nums.length; i++){
    		for(int j = i + 1; j < nums.length; j++){
    			int water = (j-i)* Math.min(nums[i], nums[j]);
    			mx = Math.max(mx, water);
    		}
    	}
        return mx;
    }


optimal : tc: o(n) 

class Solution {
    public int maxArea(int[] heights) {
        int left=0;
        int right=heights.length-1;

        int maxArea=0;

        while(left<right){

            int width=right-left;
            int len=Math.min(heights[left],heights[right]);

            int currentArea=width*len;

            maxArea=Math.max(maxArea,currentArea);

            if(heights[left]<heights[right]){
                left++;
            }
            else{
                right--;
            }

          

        }

        return maxArea;
    }
}
