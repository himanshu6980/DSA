brute force: find all permution tc: o(n*n!)

tc: o(n)

public class Solution {
    public static List< Integer > nextGreaterPermutation(List< Integer > A) {
        int idx=-1;

        int n = A.size();
		
		// first index i from the back of the given array where arr[i] becomes smaller than arr[i+1]

        for(int i=n-2;i>=0;i--){
            if(A.get(i)<A.get(i+1)){
                idx=i;
                break;
            }
        }
		
		//if such a break-point does not exist i.e. if the array is sorted in decreasing order,

        if(idx==-1){
         Collections.reverse(A);
         return A;

        }
		//If a break-point exists:
	//Find the smallest number i.e. > arr[i] and in the right half of index i(i.e. from index i+1 to n-1) and swap it with arr[i].
    // Reverse the entire right half(i.e. from index i+1 to n-1) of index i. And finally, return the array.

        for(int i=n-1;i>=idx;i--){
            if(A.get(i)>A.get(idx)){
                int t= A.get(i);
                A.set(i, A.get(idx));
                A.set(idx, t);
                break;
            }
        }

        int left = idx+1;
        int right = n - 1;

        while (left < right) {
            // Swap elements at left and right indexes
            int temp = A.get(left);
            A.set(left, A.get(right));
            A.set(right, temp);

            // Move pointers
            left++;
            right--;
        }

        return A;


     
    }
}