class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
	
		 //Approach 1  tc: o(n* klogk ) since we are sorting k characters n times in the loop.
        // HashMap<String, List<String>> map=new HashMap<>();

        // for(int i=0;i<strs.length;i++){

        //     String s=strs[i];

        //     char [] charArray=s.toCharArray();

        //     Arrays.sort(charArray);

        //     String newSorted=new String(charArray);

        //     if(!map.containsKey(newSorted)){
        //         map.put(newSorted, new ArrayList<>());
        //     }

        //     //(map : ate (newSorted)--> ate, eat, tea)

        //     map.get(newSorted).add(s);


        // }

        // return new ArrayList<>(map.values());

        //approach 2  better tc: o(n*k) 

         HashMap<String, List<String>> map=new HashMap<>();

        for(int i=0;i<strs.length;i++){

            String s=strs[i];

            char [] charArray=s.toCharArray();

            int [] count=new int[26];

            for(int j=0;j<charArray.length;j++){
                count[charArray[j]- 'a']++;
            }

            String key=Arrays.toString(count);

        
            if(!map.containsKey(key)){
                map.put(key, new ArrayList<>());
            }


            map.get(key).add(s);


        }

        return new ArrayList<>(map.values());


    }
}