import java.util.Arrays;
import java.util.Comparator;
import java.util.*;

public class Solution {
    public static List< List< Integer > > mergeOverlappingIntervals(int [][]arr){
        // Write your code here.

    //     int n = arr.length; // size of the array
    //     //sort the given intervals:
    //     Arrays.sort(arr, new Comparator<int[]>() {
    //         public int compare(int[] a, int[] b) {
    //             return a[0] - b[0];
    //         }
    //     });

    //      List<List<Integer>> ans = new ArrayList<>();

    //      for(int i=0;i<n;i++){
    //         int start = arr[i][0];
    //         int end = arr[i][1];

    //         if (!ans.isEmpty() && end <= ans.get(ans.size() - 1).get(1)) {
    //             continue;
    //         }

    //           for (int j = i + 1; j < n; j++) {
    //             if (arr[j][0] <= end) {
    //                 end = Math.max(end, arr[j][1]);
    //             } else {
    //                 break;
    //             }
    //         }
    //         ans.add(Arrays.asList(start, end));
    //      }

    //  return ans;

           int n = arr.length; // size of the array
        //sort the given intervals:
        Arrays.sort(arr, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];
            }
        });

         List<List<Integer>> ans = new ArrayList<>();

        int start  =  arr[0][0];
       int end =  arr[0][1]; 

       for(int i=1;i<n;i++){
        int s = arr[i][0];
           int e = arr[i][1];
           if( s<=end  ) { 
               // so merge both intervals 
               end =  Math.max(end,e);
           }
            else{ // if merge not possible , then insert prev interval into list
               ans.add(Arrays.asList(start,end));
               start = s;
               end =  e;                
           }

       }

       // add last one

       ans.add(Arrays.asList(start, end));


       return ans;
      
    }
}