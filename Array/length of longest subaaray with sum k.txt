better:  tc: o(n^2)

    public static int getLongestSubarray(int []a, int k) {
        int n = a.length; 

        int len = 0;
        for (int i = 0; i < n; i++) { 
            int s = 0;
            for (int j = i; j < n; j++) { 
                // add the current element to
                // the subarray a[i...j-1]:
                s += a[j];

                if (s == k)
                    len = Math.max(len, j - i + 1);
            }
        }
        return len;
    }
	
optimal :  tc: o(n) 

public class Solution {
	public static int getLongestSubarray(int []a, int k) {
		 int len=0;
        long sum=0;

        HashMap<Long,Integer> prefixSum=new HashMap<>();

        for(int i=0;i<a.length;i++){

            sum+=a[i];

            if(sum==k){
			//max length update
              len=Math.max(len,i+1);
                
            }

            long rem=sum-k;

            if(prefixSum.containsKey(rem)){
                int l=i-prefixSum.get(rem);
                len=Math.max(len,l);

            }

            if (!prefixSum.containsKey(sum)) {
                prefixSum.put(sum, i);
            }       
         }

        return len;
	}
}