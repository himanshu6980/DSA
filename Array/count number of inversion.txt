
public class Solution {
    public static int numberOfInversions(int []arr, int n) {
         //brute force tc: o(n^2)
        // int cnt=0;

        // for(int i=0;i<n-1;i++){
        //     for(int j=i+1;j<n;j++){

        //         if(a[i]> a[j]){
        //             cnt++;
        //         }
        //     }
        // }

        // return cnt;
		
		//optimal solution  below tc: o(nlogn)

        return mergeSort(arr,0,n-1);



    }

    public static int mergeSort(int [] arr, int low, int high){
            int cnt=0;
            if (low >= high) return cnt;

            int mid = (low+high)/2;
            cnt+=mergeSort(arr,low,mid);
            cnt+=mergeSort(arr, mid+1, high);
            cnt+=merge(arr,low,mid,high);

            return cnt;

    }

    public static int merge(int [] arr, int low, int mid, int high){

        ArrayList<Integer> temp=new ArrayList<>();

        int left=low;
        int right=mid+1;

        int cnt=0;

        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                cnt += (mid - left + 1); // main cond
				
                temp.add(arr[right]);
                right++;
            }
        }
		
/*When this happens, it means that all the remaining elements in the left half (from left to mid) are greater than the current element in the right half.

Therefore, the number of inversions contributed by this element is (mid - left + 1), which is the number of elements remaining in the left half.*/


        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }

        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }

        // transfering all elements from temporary to arr //
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }

        return cnt;


    }

    
}