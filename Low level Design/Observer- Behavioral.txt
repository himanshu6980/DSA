The Observer Design Pattern is a behavioral design pattern that defines a one-to-many dependency between objects. 

When one object (the subject) changes its state, all its dependents (observers) are notified and updated automatically.

✔️ Loose Coupling – The subject and observers are independent.


Core Components

Subject/Observable: The object that maintains a list of observers and notifies them of state changes
Observer: Interface or abstract class defining the update method that concrete observers implement
Concrete Subject: Implementation of the Subject interface
Concrete Observer: Implementation of the Observer interface

// Observer interface
interface Observer {
    void update(String message);
}

// Subject interface
interface Subject {
    void registerObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers();
}

// Concrete Subject
class MessagePublisher implements Subject {
    private List<Observer> observers = new ArrayList<>();
    private String message;
    
    @Override
    public void registerObserver(Observer observer) {
        observers.add(observer);
    }
    
    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }
    
    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(message);
        }
    }
    
    public void setMessage(String message) {
        this.message = message;
        notifyObservers();
    }
}

// Concrete Observer 1
class MessageSubscriber1 implements Observer {
    @Override
    public void update(String message) {
        System.out.println("MessageSubscriber1 received: " + message);
    }
}

// Concrete Observer 2
class MessageSubscriber2 implements Observer {
    @Override
    public void update(String message) {
        System.out.println("MessageSubscriber2 received: " + message);
    }
}

// Client class
public class ObserverDemo {
    public static void main(String[] args) {
        MessagePublisher publisher = new MessagePublisher();
        
        Observer subscriber1 = new MessageSubscriber1();
        Observer subscriber2 = new MessageSubscriber2();
        
        publisher.registerObserver(subscriber1);
        publisher.registerObserver(subscriber2);
        
        publisher.setMessage("Hello, Observers!");
        
        // Output will be:
        // MessageSubscriber1 received: Hello, Observers!
        // MessageSubscriber2 received: Hello, Observers!
        
        publisher.removeObserver(subscriber1);
        
        publisher.setMessage("Subscriber1 has left!");
        
        // Output will be:
        // MessageSubscriber2 received: Subscriber1 has left!
    }
}
