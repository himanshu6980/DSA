class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
			tc: o(m+n) sc: o(m+n)
        // int m=nums1.length;
        // int n=nums2.length;
        // int [] nums3 = new int[m+n];

        // int i =0;
        // int j =0;
        // int k=0;

        // //traverse both list

        // while(i<m && j<n){
        // if(nums1[i]<nums2[j]){
        // nums3[k]=nums1[i];
        // i=i+1;
        // }
        // else{
        // nums3[k]=nums2[j];
        // j=j+1;
        // }
        // k=k+1;
        // }

        // //traverse remaining
        // while(i<m){
        // nums3[k]=nums1[i];
        // i=i+1;
        // k=k+1;
        // }
        // while(j<n){
        // nums3[k]=nums2[j];
        // j=j+1;
        // k=k+1;
        // }

        // int p=nums3.length;

        // if(p%2 !=0){
        // return nums3[p/2];
        // }
        // else{
        // return (double)(nums3[p/2]+ nums3[p/2-1])/2.0;
        // }
		
		tc: o(m+n) sc: o(1)
		
		We will stick to the same basic approach, but instead of storing elements in a separate array, we will use a counter called 'cnt' to represent the imaginary third array's index. As we traverse through the arrays, when 'cnt' reaches either index (n1+n2)/2 or ((n1+n2)/2)-1, we will store that particular element.
		
		

        int m = nums1.length;
        int n = nums2.length;

        int p = m + n;

        int index1 = p / 2;
        int index2 = p / 2 - 1;

        int cnt = 0;
        int ele1 = -1;
        int ele2 = -1;

        int i = 0;
        int j = 0;

        // traverse both list

        while (i < m && j < n) {
            if (nums1[i] < nums2[j]) {
                if (cnt == index1) {
                    ele1 = nums1[i];
                }
                if (cnt == index2) {
                    ele2 = nums1[i];
                }
                cnt++;

                i = i + 1;
            } else {

                if (cnt == index1) {
                    ele1 = nums2[j];
                }
                if (cnt == index2) {
                    ele2 = nums2[j];
                }
                j = j + 1;
                cnt++;
            }
        }

        // traverse remaining
        while (i < m) {
            if (cnt == index1) {
                ele1 = nums1[i];
            }
            if (cnt == index2) {
                ele2 = nums1[i];
            }
            cnt++;
            i = i + 1;
        }
        while (j < n) {
            if (cnt == index1) {
                ele1 = nums2[j];
            }
            if (cnt == index2) {
                ele2 = nums2[j];
            }
            j = j + 1;
            cnt++;
        }

        if(p%2 !=0){
            return ele1;
        }
        else{
            return (double) (ele1 + ele2)/2.0;
        }

    }
}


optimal 
BS approach  O(log(min(n1,n2))),


   class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {

        //binary serach

        int n1=nums1.length;
        int n2=nums2.length;

        if(n1>n2){
            return findMedianSortedArrays(nums2,nums1);
        }
        int left=0;
        int right=n1;

        int noofelementrequirendinleftsymmetry=(n1+n2+1)/2;

        while(left<=right){
            int mid1=left+(right-left)/2;
            int mid2=noofelementrequirendinleftsymmetry-mid1;
            int l1=Integer.MIN_VALUE;
            int l2=Integer.MIN_VALUE;
            int r1=Integer.MAX_VALUE;
            int r2=Integer.MAX_VALUE;

            if(mid1<n1){
                r1=nums1[mid1];
            }
            if(mid2<n2){
                r2=nums2[mid2];
            }
            if(mid1-1>=0){
                l1=nums1[mid1-1];
            }
            if(mid2-1>=0){
                l2=nums2[mid2-1];
            }

            if(l1<=r2 && l2<=r1){
                if((n1+n2)%2 !=0){
                    //odd
                    return Math.max(l1,l2);
                }
                else{
                    return (Math.max(l1,l2)+ Math.min(r1,r2))/2.0;
                }
            }
            else if(l1>r2){
                right=mid1-1;
            }
            else if(l2>r1){
                left=mid1+1;
            }


        }

        return 0;

    }
}