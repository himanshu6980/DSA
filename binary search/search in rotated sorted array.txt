class Solution {
    public int search(int[] nums, int target) {

        int left=0;
        int right=nums.length-1;

        while(left<=right){

            int mid= left+(right-left)/2;

            if(nums[mid]==target){
                return mid;
            }

            //left sorted

            if(nums[left]<=nums[mid]){
                if(nums[left]<=target && target <= nums[mid]){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
			//right sorted
            else{
                if(nums[mid]<=target && target<=nums[right]){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
            
        }


        return -1;
    }
}


// if duplicate


class Solution {
    public boolean search(int[] nums, int target) {
        int left=0;
        int right=nums.length-1;

        while(left<=right){

            int mid= left+(right-left)/2;

            if(nums[mid]==target){
                return true;
            }
            //dupicate case 3 1 2 3 3 3
            if(nums[left]==nums[mid] && nums[mid]==nums[right]){
                // we can ust shrink the window because we cant figure out which half (left or right is sorte)
                left++;
                right--;
                continue;
            }

            //left sorted

            if(nums[left]<=nums[mid]){
                if(nums[left]<=target && target <= nums[mid]){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
            else{
                if(nums[mid]<=target && target<=nums[right]){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
            
        }


        return false;
        
    }
}

