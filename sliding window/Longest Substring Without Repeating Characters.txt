//brute force

class Solution {
    public int lengthOfLongestSubstring(String s) {
        //brute force

        int ans=0;

        if (s == null || s.length() == 0) {
            return ans;
        }
        if (s.length() == 1) {
            return 1;
        }

        for(int i=0;i<s.length();i++){
            String str="";
            for(int j=i;j<s.length();j++){
                str+=s.charAt(j);
                if(hasDuplicateCharacters(str)){
                    ans=Math.max(ans,str.length()-1);
                    break;
                }
                ans=Math.max(ans,str.length());


            }
        }

        return ans;
    }

    public  boolean hasDuplicateCharacters(String str) {
        HashMap<Character, Integer> charCount = new HashMap<>();

        for (char ch : str.toCharArray()) {
            charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);
            if (charCount.get(ch) > 1) {
                return true; // Duplicate found
            }
        }
        return false; // No duplicates
    }
}

better


class Solution {
    public int lengthOfLongestSubstring(String s) {
        //brute force
        int ans = 0;

        if (s == null || s.length() == 0) {
            return ans;
        }
        if (s.length() == 1) {
            return 1;
        }

        for (int i = 0; i < s.length(); i++) {
            String str = "";
            // Array to track character frequency
            boolean[] charArray = new boolean[256]; // 256 for all ASCII characters

            for (int j = i; j < s.length(); j++) {
                char currentChar = s.charAt(j);
				
                if (charArray[currentChar]) {
                    ans = Math.max(ans, str.length());
                    break; // Stop if a duplicate character is found
                }
                str += currentChar;
                charArray[currentChar] = true; // Mark character as seen

                ans = Math.max(ans, str.length());
            }
        }

        return ans;
    }
}



import java.util.HashMap;
import java.util.Map;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int left = 0;  // Left pointer
        int right = 0; // Right pointer
        Map<Character, Integer> charmap = new HashMap<>(); // Stores character and its last seen index
        int maxLen = 0;  // Stores the maximum length of substring found

        for (right = 0; right < s.length(); right++) {  // Move right pointer across the string
            char currentChar = s.charAt(right);

            // If the character is already in the map and inside the current window
            if (charmap.containsKey(currentChar)) {
                if (charmap.get(currentChar) >= left) {
                    left = charmap.get(currentChar) + 1; // Move left pointer to exclude the duplicate
                }
            }

            // Update max length
            maxLen = Math.max(maxLen, right - left + 1);

            // Store/update the character's last seen index
            charmap.put(currentChar, right);
        }

        return maxLen; // Return the maximum substring length found
    }
}
