//brute


class Solution {
    //brute force
    public String minWindow(String s, String t) {
        int n = s.length();
        int m = t.length();
        int minLength = Integer.MAX_VALUE;
        int start = -1;
        

        for (int i = 0; i < n; i++) {
            int[] hash = new int[128];
            for (char c : t.toCharArray()) {
                hash[c]++;
            }
            
            int count = 0;
            for (int j = i; j < n; j++) {
                char currentChar = s.charAt(j);
                if (hash[currentChar] > 0) {
                    hash[currentChar]--;
                    count++;
                }
                
                if (count == m) {
                    if (j - i + 1 < minLength) {
                        minLength = j - i + 1;
                        start = i;
                    }
                    break;
                }
            }
        }

        return start == -1 ? "" : s.substring(start, start + minLength);
    }
}



//sliding window

class Solution {
    public String minWindow(String s, String t) {
        
        if(t.length()> s.length()){
            return "";
        }

         int[] freq=new int[256]; //upper and lower case


        for(int i=0;i<t.length();i++){
            freq[t.charAt(i)]++;
        }

        int l=0;
        int r=0;
        int minLen=Integer.MAX_VALUE;
        int startIndex=-1;
        int cnt=0;

        while(r< s.length()){
            // t content already in s
            if(freq[s.charAt(r)] > 0){
                cnt++;
            }

            freq[s.charAt(r)]--;
            
            while(cnt== t.length()){

                //start shrinking all content of t found in s

                if(r-l+1 < minLen){
                    //checking current window size

                    minLen=r-l+1;
                    startIndex=l;
                }
                //shrik from left we need to increase freq because in first round we have decremented
                freq[s.charAt(l)]++;

                if(freq[s.charAt(l)] > 0){
                    //if it was necessary (t's character) 
                    cnt--;
                }
                l++;

                
            }
            r++;

        }

        return minLen==Integer.MAX_VALUE ? "": s.substring(startIndex, startIndex+minLen);
    }
}