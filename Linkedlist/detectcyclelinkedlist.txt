   public boolean hasCycle(ListNode head) {
		// T: O(N) S:O(N)
        // HashSet<ListNode> hset = new HashSet<>();  

        // while(head!=null){
        //     if(hset.contains(head)){
        //         return true;
        //     }
        //     hset.add(head);
        //     head=head.next;
        // }

        // return false;

// T: O(N) S:O(1)
        if(head==null || head.next==null){
            return false;
        }

        ListNode fast=head;
        ListNode slow = head;

        while(fast.next !=null && fast.next.next !=null){
            fast=fast.next.next;
             slow =slow.next;

            if(fast==slow){
                return true;
            }
        }

        return false;
    }