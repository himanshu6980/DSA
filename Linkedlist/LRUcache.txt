// Time Complexity: O(1)

// Put method: O(1)
// Get method: O(1)
// Space Complexity: O(1)


//head--> most used --> least used--> tail
//if you add automatic it is most recent so add in start an also if you get then als place in start
class Node{
    Node prev, next;
    int key, value;
    Node(int _key, int _value) {
      key = _key;
      value = _value;
    }
  }
class LRUCache {
  Node head = new Node(0, 0), tail = new Node(0, 0);
  Map<Integer, Node> map = new HashMap();
  int capacity;
    public LRUCache(int _capacity) {
    capacity = _capacity;
    head.next = tail;
    tail.prev = head;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            remove(node);
			//insert at front 
            insert(node);
      return node.value;
    } 
    else {
      return -1;
    }
    }

    private void remove(Node node) {
    map.remove(node.key);
     Node previousNode = node.prev;
    Node nextNode = node.next;

    previousNode.next = nextNode;
    nextNode.prev = previousNode;
  }
  
  private void insert(Node node) {
    // Step 1: Add the node to the map
    map.put(node.key, node);

    // Step 2: Get the node that comes immediately after the head
    Node firstNode = head.next;

    // Step 3: Update the new node to point to the firstNode
    node.next = firstNode;
    firstNode.prev = node;

    // Step 4: Insert the new node right after the head
    head.next = node;
    node.prev = head;
}

  
    
    public void put(int key, int value) {
          if(map.containsKey(key)) {
      remove(map.get(key));
    }
    if(map.size() == capacity) {
      remove(tail.prev); //least used
    }
    insert(new Node(key, value));
    }

}

