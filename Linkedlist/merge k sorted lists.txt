//usemerge 2 sorted lsit logic

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {

        if(lists.length==0){
            return null;
        }

        ListNode head=lists[0];

        for(int i=1;i<lists.length;i++){
            head = merge2sortedList(head, lists[i]);

        }

        return head;
        
    }

    public ListNode merge2sortedList(ListNode l1, ListNode l2){
        ListNode dummyNode = new ListNode(-1, null);
        ListNode temp = dummyNode;
        while(l1 !=null && l2 !=null){

            if(l1.val<=l2.val){
                temp.next=l1;
                l1=l1.next;
                temp=temp.next;
            }
            else{
                temp.next=l2;
                l2=l2.next;
                temp=temp.next;
            }
        }

        if(l1 !=null){
            temp.next=l1;
        }
        else{
            temp.next=l2;
        }
        return dummyNode.next;
    }
}



tc: nlogk
sc: o(k)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
	  //min heap
        PriorityQueue<ListNode> minheap=new PriorityQueue<>((a,b)->a.val-b.val);
     
      //heads stored
      for (int i = 0; i < lists.length; i++) {
            ListNode list = lists[i];
            if (list != null) {
                minheap.add(list);
            }
        }

        ListNode dummynode=new ListNode(-1);
        ListNode curr=dummynode;

        while(!minheap.isEmpty()){

            ListNode temp=minheap.poll();

            curr.next=temp;
            curr=curr.next;

            if(temp.next != null){
                minheap.add(temp.next);
            }
        }

        return dummynode.next;

    }
}









