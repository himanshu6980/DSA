
//iterative -- TC: O(N)  SC: O(1)

   Node reverse(Node node)
    {
        Node prev = null;
        Node current = node;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
    }
	
	
//recursive TC: O(N)  SC: O(N) stack space

       ListNode prev=null; //previous pointer
        ListNode cPtr = head; //current pointer
        ListNode nxt = null; //head pointer
        
        return reverse (cPtr, prev, nxt);
		
		
		    public ListNode reverse(ListNode cPtr, ListNode prev, ListNode nxt){
        if(cPtr == null){  //base condition
            return prev;
        }
        nxt = cPtr.next;
        cPtr.next = prev;
        prev = cPtr; 
        cPtr = nxt;
        
        return reverse(cPtr, prev, nxt);
    }