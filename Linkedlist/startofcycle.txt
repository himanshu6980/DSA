    public ListNode detectCycle(ListNode head) {
	T: O(N) S:O(N)
	//
    //         HashSet<ListNode> st=new HashSet<>();
    // while(head != null) {
    //     if(st.contains(head)) return head;
    //     st.add(head);
    //     head = head.next;
    // }
    // return null;

    //approach 2  T: O(N) S:O(1)

    ListNode fast=head;
    ListNode slow = head;
    ListNode entry = head;
 if(head == null||head.next == null) return null;
    while(fast.next!=null && fast.next.next!=null){
        slow=slow.next;
        fast=fast.next.next;

        if(slow==fast){
             while(slow != entry) {
                slow = slow.next;
                entry = entry.next;
            }
            return slow;
        }
    }

    return null;
    }