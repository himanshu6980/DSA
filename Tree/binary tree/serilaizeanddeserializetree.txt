tc: o(N) sc :o(N)


    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        if(root==null){
            return "";
        }

        Queue<TreeNode> q=new LinkedList<>();
        StringBuilder res=new StringBuilder();
        q.offer(root);

        while(!q.isEmpty()){

            TreeNode node=q.poll();

            if(node==null){
				//leaf
                res.append("# ");
                continue;
            }

            res.append(node.val+" ");
            q.offer(node.left);
            q.offer(node.right);
        }

        return res.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data==""){
            return null;
        }

        Queue<TreeNode> q=new LinkedList<>();

        String[] values=data.split(" ");

        TreeNode root = new TreeNode(Integer.parseInt(values[0]));

        q.offer(root);

        for(int i=1;i<values.length;i++){
            TreeNode node=q.poll();

            if(!values[i].contains("#")){
               TreeNode leftnode = new TreeNode(Integer.parseInt(values[i]));  
               node.left=leftnode;
               q.offer(leftnode);
            }

              if(!values[++i].contains("#")){
               TreeNode rightnode = new TreeNode(Integer.parseInt(values[i]));  
               node.right=rightnode;
               q.offer(rightnode);
            }
        }
        return root;
    }
}