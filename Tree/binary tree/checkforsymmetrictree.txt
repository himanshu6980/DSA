The time complexity of the given code is O(n) and the space complexity is O(h)


 public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }

        return isSymmetrichelp(root.left,root.right);
    }

    public boolean isSymmetrichelp(TreeNode left,TreeNode right){

        if(left==null && right==null){
            return true;
        }

       if(left!=null && right==null){
            return false;
        }
         if(left==null && right!=null){
            return false;
        }
        
        if(left.val!=right.val){
            return false;
        }
       
       boolean cnd1 = isSymmetrichelp(left.left,right.right);
       boolean cnd2 = isSymmetrichelp(left.right,right.left);
       
       if(cnd1==true && cnd2==true){
           return true;
       }
       else{
           return false;
       }
    }
	
	
	
//iterative

         if(root == null) {
        return true;
    }

    Stack<TreeNode> stack = new Stack<>();
    stack.push(root.left);
    stack.push(root.right);

    while(!stack.isEmpty()) {
        TreeNode right = stack.pop();
        TreeNode left = stack.pop();

        if(left == null && right == null) {
            continue;
        }
        if(left == null || right == null) {
            return false;
        }
        if(left.val != right.val) {
            return false;
        }

        stack.push(left.left);
        stack.push(right.right);
        stack.push(left.right);
        stack.push(right.left);
    }

    return true;