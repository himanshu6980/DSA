/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        //recurive
        // if(root==null){
        //     return null;
        // }

        // TreeNode node = new TreeNode(root.val);

        // node.right = invertTree(root.left);
        // node.left = invertTree(root.right);
        
        // return node;

        //iterative

         if(root==null){
            return null;
        }

         Queue<TreeNode> queue = new LinkedList<>();
            queue.add(root);

            while(!queue.isEmpty()){
                TreeNode node=queue.poll();

                //swap
                TreeNode temp=node.left;
                node.left=node.right;
                node.right=temp;

                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
                
            }

            return root;


    }
}