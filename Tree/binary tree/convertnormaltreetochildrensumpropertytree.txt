t : o(n) s:o(n) 

//ifnoduplicateelemntpresent

   public static void changeTree(BinaryTreeNode < Integer > root) {
        // Write your code here.

        if(root==null){
            return ;
        }

        int child=0;
        if(root.left!=null){
            child+=root.left.data;
        }

        if(root.right!=null){
            child+=root.right.data;
        }

        if(child<root.data){
            if(root.left !=null){
                root.left.data=root.data;
            }

            if(root.right!=null){
                root.right.data=root.data;
            }
        }

        changeTree(root.left);
        changeTree(root.right);

       

        if(root.left!=null){
            root.data=root.left.data;
        }

        if(root.right!=null){
               root.data=root.right.data;
        }

         if(root.left != null && root.right!=null){
            root.data=root.left.data+root.right.data;
        }



    }
	
	
	
	//ifduplicatearethere  (we process root one by one)
	
	public static Node buildTree(int inorder[], int preorder[], int n)
    {
        Map<Integer,List<Integer>> inmap = new HashMap<>();

        for (int i = 0; i < inorder.length; i++) {
            if (!inmap.containsKey(inorder[i])) {
                inmap.put(inorder[i], new ArrayList<Integer>());
            }
            inmap.get(inorder[i]).add(i);
        }

        Node root= buildTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1,inmap);

        return root;
    }

    public static Node buildTree(int[] preorder, int prestart, int preend , int[] inorder , 
    int instart,int inend, Map<Integer,List<Integer>> inmap){


        if(prestart>preend || instart>inend){
            return null;
        }

        Node root=new Node(preorder[prestart]);

         List<Integer> inroot = inmap.get(root.data);
        int numsleft = inroot.get(0) - instart;
        root.left=buildTree(preorder,prestart+1,prestart+numsleft,inorder,instart,inroot.get(0)-1,inmap);

        root.right=buildTree(preorder,prestart+numsleft+1,preend,inorder,inroot.get(0)+1,inend,inmap);
        inroot.remove(0); 
        return root;

    }