/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */ 
 
 Time complexity: O ( m * n )  
 Space complexity: O ( m + n )  
 Where m m is the number of nodes in s u b R o o t and n n is the number of nodes in r o o t 
 
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {

        if(root==null){
            return false;
        }
        if(subRoot==null){
            return true;
        }
        if(isSameTree(root, subRoot)){
            return true;
        }

        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);

        
    }

    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null &&  q== null) return true;
        if(p == null ||  q== null) return false;
        return (p.val==q.val) && isSameTree(p.right, q.right) && isSameTree(p.left, q.left) ;
    }
}