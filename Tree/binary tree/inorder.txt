
    public List<Integer> inorderTraversal(TreeNode root) {
    // tc : o(n)  sc: o(n) -- Left root right
    // ArrayList<Integer> inOrder = new ArrayList<>();
    //     inOrderTrav(root, inOrder);
    //     return inOrder;

    //iterative with stack t :o(n) , s : o(n)

    List<Integer> ans=new ArrayList<>();

    Stack<TreeNode> st=new Stack<>();

    TreeNode node = root;

    while(true){

        if(node !=null){
            st.push(node);
            node=node.left;
        }
        else{
            if(st.isEmpty()){
                break;
            }
            node=st.pop();
            ans.add(node.val);
            node=node.right;

        }
    }

    return ans;
    }

     public void inOrderTrav(TreeNode root, List<Integer> inOrder) {
         if(root==null){
             return;
         }

         inOrderTrav(root.left,inOrder);
         inOrder.add(root.val);
         inOrderTrav(root.right,inOrder);
    }