
 */
class Solution {
    TreeNode prev=null;
    public void flatten(TreeNode root) {

        //recursive tc: o(N) sc:o(N)
        // if(root==null){
        //     return;
        // }

        // flatten(root.right);
        // flatten(root.left);
        // root.right=prev;
        // root.left=null;
        // prev=root;

        //iterative tc: o(N) sc:o(N)
        // if (root == null) return;
        // Stack<TreeNode> s = new Stack<>();
        // s.push(root);

        // while(!s.isEmpty()){

        //     TreeNode curr=s.peek();
        //     s.pop();
        //     if(curr.right != null){
        //         s.push(curr.right);
        //     }
        //      if(curr.left != null){
        //         s.push(curr.left);
        //     }

        //     if(!s.isEmpty()){
        //         curr.right=s.peek();
        //     }

        //     curr.left=null;

        // }


        //morris idea tc: o(N) sc: o(1)

        TreeNode curr=root;

        while(curr !=null){

            if(curr.left!=null){

                prev=curr.left;

                while(prev.right!=null){
                    prev=prev.right;
                }

                prev.right=curr.right;
                curr.right=curr.left;
                curr.left=null;
            }

            curr=curr.right;
        }


    }
}