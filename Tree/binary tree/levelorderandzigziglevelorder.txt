Time Complexity: O(N)

Space Complexity: O(N)


    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans =new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();

        if(root==null){
            return ans;
        }
        queue.offer(root);

        while(!queue.isEmpty()){
                int qsize=queue.size();
                List<Integer> levellist=new ArrayList<>();

                for(int i=0;i<qsize;i++){
                    if(queue.peek().left !=null){
                        queue.offer(queue.peek().left);
                    }
                     if(queue.peek().right !=null){
                        queue.offer(queue.peek().right);
                    }

                    levellist.add(queue.poll().val);
                }

                ans.add(levellist);
        }
        return ans;
    }
	
	
	
	//zigzag  time complexity same
	
	 public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
          List<List<Integer>> ans =new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();

        if(root==null){
            return ans;
        }
        queue.offer(root);

        boolean islefttoright=true;

        while(!queue.isEmpty()){
                int size=queue.size();
                List<Integer> levellist=new ArrayList<>();

                for(int i=0;i<size;i++){
                    if(queue.peek().left !=null){
                        queue.offer(queue.peek().left);
                    }
                     if(queue.peek().right !=null){
                        queue.offer(queue.peek().right);
                    }
                    if(islefttoright==true){
                    levellist.add(queue.poll().val);
                    }
                    else{
                        levellist.add(0,queue.poll().val); //always add element at start
                    }
                    
                }
                islefttoright=!islefttoright;
                ans.add(levellist);
              
        }
        return ans;
    }