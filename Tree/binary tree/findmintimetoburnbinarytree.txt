t:o(n) s:o(n)

 public static int minTime(Node root, int target) 
    {
        // Your code goes here
        
         int time = 0;
        HashMap<Node, Node> parentmap = new HashMap<>();
        generatechildparentmap(parentmap, root);

        HashSet<Node> visited = new HashSet<>();
        Queue<Node> q = new LinkedList<>();
        q.offer(findTargetNode(root, target));

        while (!q.isEmpty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                Node curr = q.poll();
                visited.add(curr);

                if (curr.left != null && !visited.contains(curr.left)) {
                    q.add(curr.left);
                }

                if (curr.right != null && !visited.contains(curr.right)) {
                    q.add(curr.right);
                }

                if (parentmap.containsKey(curr) && !visited.contains(parentmap.get(curr))) {
                    q.add(parentmap.get(curr));
                }
            }

            time++;

           
        }

        return time - 1;
    }

   public static void generatechildparentmap(HashMap<Node,Node> parentmap,Node root){

        if(root==null){
            return;
        }

        if(root.left!=null){
            parentmap.put(root.left,root);
        }

         if(root.right!=null){
            parentmap.put(root.right,root);
        }
    generatechildparentmap(parentmap,root.left);
     generatechildparentmap(parentmap,root.right);

     return;

    }

    public static Node findTargetNode(Node root, int target) {
        if (root == null) {
            return null;
        }

        if (root.data == target) {
            return root;
        }

        Node left = findTargetNode(root.left, target);
        Node right = findTargetNode(root.right, target);

        if (left != null) {
            return left;
        }

        if (right != null) {
            return right;
        }

        return null;
    }