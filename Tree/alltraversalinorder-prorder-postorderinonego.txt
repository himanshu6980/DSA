t: o(n) s: o(n)


public static void allTraversal(TreeNode root, List < Integer > pre, List < Integer > in , List < Integer > post) {
        Stack < Pair > st = new Stack < Pair > ();
        st.push(new Pair(root, 1));
        
        if (root == null) return;

        while (!st.isEmpty()) {
            Pair it = st.pop();


            if (it.num == 1) {
                pre.add(it.node.val);
                it.num++;
                st.push(it);

                if (it.node.left != null) {
                    st.push(new Pair(it.node.left, 1));
                }
            }

            else if (it.num == 2) { in .add(it.node.val);
                it.num++;
                st.push(it);

                if (it.node.right != null) {
                    st.push(new Pair(it.node.right, 1));
                }
            }
  
            else {
                post.add(it.node.val);
            }
        }
 

    }
	
	
	
	//recursion way
	
	public void traverse(Node node) {
    if (node == null) {
        return;
    }
    
    // Preorder traversal: visit the node, then traverse left and right subtrees
    System.out.print(node.value + " ");
    traverse(node.left);
    traverse(node.right);
    
    // Inorder traversal: traverse left subtree, visit node, then traverse right subtree
    traverse(node.left);
    System.out.print(node.value + " ");
    traverse(node.right);
    
    // Postorder traversal: traverse left and right subtrees, then visit node
    traverse(node.left);
    traverse(node.right);
    System.out.print(node.value + " ");
}
