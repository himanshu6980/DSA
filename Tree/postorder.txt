
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        // Left right root
        //    ArrayList<Integer> postorder = new ArrayList<>();
        // postOrderTrav(root, postorder);
        // return postorder;


        //using 2 stacks  t: o(n) s : o(n)+o(n)

        // Stack<TreeNode> st1=new Stack<>();
        
        // Stack<TreeNode> st2=new Stack<>();  // will have to postorder

        // List<Integer> ans = new ArrayList<>();

        // if(root==null){
        //     return ans;
        // }
        // st1.push(root);

        // while(!st1.isEmpty()){
        //     root=st1.pop();
        //     st2.push(root);

        //     if(root.left !=null){
        //         st1.push(root.left);
        //     }

        //           if(root.right !=null){
        //         st1.push(root.right);
        //     }

        // }

        // while(!st2.isEmpty()){
        //     ans.add(st2.pop().val);
        // }

        // return ans;

        //using one stack  t: o(n) s:o(n)

        Stack<TreeNode> st=new Stack<>();

        List<Integer> ans=new ArrayList<>();

        if(root==null){
            return ans;
        }

        TreeNode current=root;
        TreeNode lastvisited=null;

        while(current !=null || !st.isEmpty()){

            if(current !=null){
                st.push(current);
                current=current.left;
            }
            else{
                TreeNode peeknode = st.peek();
                if(peeknode.right !=null && lastvisited !=peeknode.right){
                    current=peeknode.right;
                }
                else{
                    ans.add(peeknode.val);
                    lastvisited=st.pop();
                }

            }
        }

        return ans;
    }

      public void postOrderTrav(TreeNode root, List<Integer> postorder) {
         if(root==null){
             return;
         }

         postOrderTrav(root.left,postorder);
   
         postOrderTrav(root.right,postorder);

         postorder.add(root.val);
    }
}