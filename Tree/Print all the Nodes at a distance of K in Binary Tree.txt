t: o(n) s: o(n)

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        HashMap<TreeNode,TreeNode> parentmap = new HashMap<>();
        generatechildparentmap(parentmap,root);

        HashSet<TreeNode> visited=new HashSet<>();
        Queue<TreeNode> q=new LinkedList<>();

        q.offer(target);

        while(!q.isEmpty()){
            int size=q.size();

            for(int i=0;i<size;i++){

                TreeNode curr=q.poll();
                visited.add(curr);
                if(k==0){
                    ans.add(curr.val);
                }
                if(parentmap.containsKey(curr) && !visited.contains(parentmap.get(curr))){
                    q.offer(parentmap.get(curr));
                }

                 if(curr.left != null && !visited.contains(curr.left)){
                    q.add(curr.left);      
                }
                
                if(curr.right != null && !visited.contains(curr.right)){
                    q.add(curr.right);      
                }
            }

            k--;
            if(k<0){
                break;
            }


        }
        return ans;

    }

    public static void generatechildparentmap(HashMap<TreeNode,TreeNode> parentmap,TreeNode root){

        if(root==null){
            return;
        }

        if(root.left!=null){
            parentmap.put(root.left,root);
        }

         if(root.right!=null){
            parentmap.put(root.right,root);
        }
    generatechildparentmap(parentmap,root.left);
     generatechildparentmap(parentmap,root.right);

     return;

    }
}